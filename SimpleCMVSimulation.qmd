---
title: "Simple CVM Simulation"
format:
  html:
    page-layout: full
    theme: 
      - cosmo 
      - custom.scss
    monofont: "Fira Code"
    df-print: paged
---

## Simple CMV Simulation

In this document, we'll do a simple CMV Simulation to show that our technique works.  We'll then use the same technique on our real data

## Initialization

We will need the following projects:

- [tidyverse](https://tidyverse.org): Data wrangling
- [lavaan](https://lavaan.ugent.be): SEM functionality
- [simstandard](https://wjschne.github.io/simstandard/): Does lavaan simulation properly (lavaan's SimulateData() has problems) and provides some handy functions for working with SEM data in data frames
- [semPlot](http://sachaepskamp.com/documentation/semPlot/semPaths.html): Plotting SEM diagrams

We'll also set the random seed to an arbitrary fixed value to allow for reproduceability

```{r}
#| output: false
library(tidyverse)
library(lavaan)
library(simstandard)
library(semPlot)

set.seed(1337)
```

## Model

Our model has three latent variables that are each measured with two or three items.  Additionally, each item is measured using a 5-likert scale.

- X
  
  1. x1
  2. x2
  3. x3
  
- Y

  1. y1
  2. y2
  3. y3

- Z

  1. z1
  2. z2
  3. z3


We'll input the model in lavaan formula syntax and have it create an SEM diagram for us  

```{r}
#| fig-width: 10
#| fig-height: 10
cfa_model <- '
  # measurement model
  X =~ x1 + x2 + x3
  Y =~ y1 + y2 + y3
  Z =~ z1 + z2 + z3
  
  # covariances
  X ~~ Y
  Y ~~ Z
  X ~~ Z
'

semPlotModel_lavaanModel(cfa_model) |> 
  semPaths(layout="tree", rotation=2, nCharNodes=5, sizeMan2 = 2.5, mar = c(1,4,1,3), label.norm = "OOOOO", residuals = FALSE)
```

## Simulation

To simulate, we need to set the parameter values.  We'll do this for each kind of parameter.  Before we do that, though, we need to convert the model to a lavaan parameter table.  

```{r}
cfa_model_pars <- lavaanify(cfa_model, std.lv = TRUE)
```

### parameters

We'll create a value for each parameter 
```{r}
loadings <- 0.6
covariances <- 0.1
cfa_model_pars <- cfa_model_pars |> 
  mutate(ustart = ifelse(op == "=~", loadings, ustart)) |>
  rowwise() |> mutate(ustart = ifelse(op == "~~" && lhs != rhs, covariances, ustart)) |> ungroup() |> as.data.frame()
```


```{r}
cfa_sim <- sim_standardized(cfa_model_pars, latent = FALSE, errors = FALSE, factor_scores = FALSE, composites = FALSE, matrices = FALSE)
#cfa_sim <- simulateData(cfa_model_pars, model.type = "cfa")
#change to likert scores
cfa_sim <- cfa_sim |> mutate(across(everything(), \(x) findInterval(x, vec=c(-Inf,-1,-0.5, 0.5,1,Inf))))
cfa_sim
```

Check the fit of the simulation

```{r}
fit <- cfa(cfa_model, cfa_sim, ordered = TRUE, parameterization = "theta", std.lv = TRUE)
summary(fit, fit.measures = TRUE)
```

## Model with CMV

Let's add the CMV

```{r}
#| fig-width: 10
#| fig-height: 10
cmv_model <- '
  # measurement model
  X =~ 0.6*x1 + 0.6*x2 + 0.6*x3
  Y =~ 0.6*y1 + 0.6*y2 + 0.6*y3
  Z =~ 0.6*z1 + 0.6*z2 + 0.6*z3
  CMV =~ 0.5*x1 + 0.5*x2 + 0.5*x3 + 0.5*y1 + 0.5*y2 + 0.5*z1 + 0.5*z2 + 0.5*z3

  # covariances
  X ~~ 0.1*Y
  Y ~~ 0.1*Z
  X ~~ 0.1*Z
  X ~~ 0*CMV
  Y ~~ 0*CMV
  Z ~~ 0*CMV
'

semPlotModel_lavaanModel(cmv_model) |> 
  semPaths(layout="tree", rotation=2, nCharNodes=5, sizeMan2 = 2.5, mar = c(1,4,1,3), label.norm = "OOOOO", residuals = FALSE)
```
```{r}
# lmodel <- lavaanify(cmv_model, std.lv = TRUE)
# loadings <- 0.6
# covariances <- 0.1
# cmv <- 0
# lmodel <- lmodel |> rowwise() |>
#   mutate(ustart = ifelse(op == "=~" && lhs != "CMV", loadings, ustart)) |>
#   mutate(ustart = ifelse(op == "=~" && lhs == "CMV", cmv, ustart)) |>
#   mutate(ustart = ifelse(op == "~~" && lhs != rhs, covariances, ustart)) |> ungroup() |> as.data.frame()
```

Simulate and fit this one

```{r}
cmv_sim <- sim_standardized(cmv_model, latent = FALSE, errors = FALSE, factor_scores = FALSE, composites = FALSE, matrices = FALSE)
#change to likert scores
cmv_sim <- cmv_sim |> mutate(across(everything(), \(x) findInterval(x, vec=c(-Inf,-1,-0.5, 0.5,1,Inf))))
cmv_sim
```

Check the fit of the simulation

```{r}
cmv_fit <- cfa(cfa_model, cmv_sim, ordered = TRUE, parameterization = "theta", std.lv = TRUE)
#cmv_fit <- cfa(cfa_model, cmv_sim, std.lv = TRUE)
summary(cmv_fit, fit.measures = TRUE)
```

Compare the two models

```{r}
anova(fit, cmv_fit)
```

