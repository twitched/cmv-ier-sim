---
title: "GenerateBaselineData"
format:
  html:
    page-layout: full
    theme: 
      - cosmo 
      - custom.scss
    monofont: "Fira Code"
    df-print: paged
bibliography: references.bib
---

```{r}
#| label: setup
#| echo: false

library(tidyverse)
library(lavaan)
library(semPlot)

set.seed(1337)
#plan("multicore") # when using parallel processing in furrr, use all cores

source("cmv_sim_functions.R", local = knitr::knit_global())
```

## Introduction

In this document we generate a random dataset using the model first introduced in [@maxham_firms_2003] and used for a CMV simulation in [@fuller_common_2016]

## The model

The model we will use has the constructs in Table 1 below

| Construct                  | Abbreviation | Number of measures |
|----------------------------|--------------|--------------------|
| Satisfaction with Recovery | SSR          | 3                  |
| Return Intent[^1]          | RI           | 3                  |
| Word of Mouth              | WOM          | 3                  |
| Satisfaction               | SAT          | 3                  |
| Distributive Justice       | DJ           | 4                  |
| Interactional Justice      | IJ           | 4                  |
| Procedural Justice         | PJ           | 4                  |

[^1]: In [@maxham_firms_2003], There's a "Purchase Intent", but not a "Return Intent".

Each of these constructs has several measures, and the model is expressed as a confirmatory factor analysis in the lavaan equation below and associated diagram

```{r}
cfa_sim_model <- "
  # Measurement model
  SSR =~ ssr1 + ssr2 + ssr3
  RI  =~ ri1 + ri2 + ri3
  WOM =~ wom1 + wom2 + wom3
  SAT =~ sat1 + sat2 + sat3
  DJ  =~ dj1 + dj2 + dj3 + dj4
  IJ  =~ ij1 + ij2 + ij3 + ij4
  PJ  =~ pj1 + pj2 + pj3 + pj4

  # Variances
  SSR ~~ SSR
  RI ~~ RI
  WOM ~~ WOM
  SAT ~~ SAT
  DJ ~~ DJ
  IJ ~~ IJ
  PJ ~~ PJ
  
  # Covariances
  SSR ~~ RI  
  SSR ~~ WOM 
  SSR ~~ SAT 
  SSR ~~ DJ  
  SSR ~~ IJ  
  SSR ~~ PJ  
  RI ~~ WOM 
  RI ~~ SAT 
  RI ~~ DJ  
  RI ~~ IJ  
  RI ~~ PJ  
  WOM ~~ SAT 
  WOM ~~ DJ  
  WOM ~~ IJ  
  WOM ~~ PJ  
  SAT ~~ DJ  
  SAT ~~ IJ  
  SAT ~~ PJ  
  DJ ~~ IJ  
  DJ ~~ PJ  
  IJ ~~ PJ
  
  # Means
  ssr1 ~ ssr_int * 1
  ssr2 ~ ssr_int * 1
  ssr3 ~ ssr_int * 1 
  ri1 ~ ri_int * 1
  ri2 ~ ri_int * 1
  ri3 ~ ri_int * 1
  wom1 ~ wom_int * 1
  wom2 ~ wom_int * 1
  wom3 ~ wom_int * 1
  sat1 ~ sat_int * 1
  sat2 ~ sat_int * 1
  sat3 ~ sat_int * 1
  dj1 ~ dj_int * 1
  dj2 ~ dj_int * 1
  dj3 ~ dj_int * 1
  dj4 ~ dj_int * 1
  ij1 ~ ij_int * 1
  ij2 ~ ij_int * 1
  ij3 ~ ij_int * 1
  ij4 ~ ij_int * 1
  pj1 ~ pj_int * 1
  pj2 ~ pj_int * 1
  pj3 ~ pj_int * 1
  pj4 ~ pj_int * 1
"
semPlotModel_lavaanModel(cfa_sim_model) |> 
  semPaths(layout="tree2", rotation=2, nCharNodes=5, sizeMan2 = 2.5, mar = c(1,4,1,3), 
           label.norm = "OOOOO", intAtSide = TRUE, levels = c(1,2,7,8), curvature = 2, 
           residuals = FALSE)
```

## The Data

Let's use the correlation matrix data from [@fuller_common_2016] to fit this model

```{r}
# enter as a lower triangular matrix
lower_tri <- matrix(0, ncol=7, nrow=7)

# Fill the columns of the lower triangle
lower_tri[1:1, 1] <- .88
lower_tri[1:2, 2] <- c(.46, .88)
lower_tri[1:3, 3] <- c(.70, .48, .88)
lower_tri[1:4, 4] <- c(.38, .65, .34, .90)
lower_tri[1:5, 5] <- c(.64, .50, .53, .51, .89)
lower_tri[1:6, 6] <- c(.55, .47, .57, .52, .57, .89)
lower_tri[1:7, 7] <- c(.47, .44, .43, .59, .55, .55, .87)

# Create the full correlation matrix
cor_matrix <- lower_tri + t(lower_tri) - diag(diag(lower_tri))

# get the reliabilities
reliabilities <- diag(cor_matrix)

# set the diagonal to 1
diag(cor_matrix) <- 1

cor_matrix
```

These are only the correlations. We need to use the standard deviations to get the variance-covariance matrix. At the same time let's add the names and set the means.

```{r}
var_names <- c("ssr", "ri", "wom", "sat", "dj", "ij", "pj")

# Assign the names to the correlation matrix
rownames(cor_matrix) <- var_names
colnames(cor_matrix) <- var_names

# Add in the means and standard deviation:
construct_means <- c(SSR = 5.49, RI = 3.25, WOM = 4.03, SAT = 4.27, DJ = 3.44, IJ = 3.89, PJ = 3.93)
construct_sds <- c(SSR = 1.01, RI = 1.03, WOM = 0.92, SAT = 1.45, DJ = 1.38, IJ = 1.27, PJ = 1.17)

#create the covariance matrix
cov_matrix <- cor2cov(cor_matrix, construct_sds) 
cov_matrix
```

## Simulating New Data

To simulate data we need all of the right-side components of the following [@ji_bayesian_2022]:

$$
\mathbf{y_j}=\mathbf{\beta} + \mathbf{\Lambda}\mathbf\eta_{j} + \mathbf{\epsilon_{j}}
$$

The notation is as follows:

-   $y_{ij}$ is the response of person $j\,(j=1,...,J)$ on item $i\,(i=1,...,I)$.

-   $\beta_i$ is the intercept for item $i$ or the mean

-   $\eta_{jk}$ is the $k$th common factor for person $j$.

-   $\lambda_{ik}$ is the factor loading of item $i$ on factor $k$.

-   $\epsilon_{ij}$ is the random error term for person $j$ on item $i$.

-   $\mathbf{\Psi}$ is the variance-covariance matrix of the common factors $η_j$.

-   $\mathbf{\Theta}$ is the variance-covariance matrix of the residuals (or unique factors) $ϵ_j$.

In expanded format

$$
\underbrace{\left[\begin{array}{l}
y_{1 j} \\
y_{2 j} \\
\vdots \\
y_{i j}
\end{array}\right]}_{\mathbf{y}_{j}}=\underbrace{\left[\begin{array}{c}
\beta_{1} \\
\beta_{2} \\
\vdots \\
\beta_{i}
\end{array}\right]}_{\mathbf{\beta}}+\underbrace{\left[\begin{array}{cc}
\lambda_{11} & & 0 \\
\lambda_{21} & & 0 \\
\vdots & \cdots & \vdots \\
\lambda_{i1} & & 0 \\
\vdots & \ddots & \vdots \\
0 &  & \lambda_{ik} \\
\vdots & \cdots & \vdots \\
0 & & \lambda_{ik}
\end{array}\right]}_{\Lambda}\underbrace{\left[\begin{array}{l}
\eta_{1 j} \\
\eta_{2 j} \\
\vdots \\
\eta_{i j}
\end{array}\right]}_{\mathbf{\eta}_j}+\underbrace{\left[\begin{array}{c}
\epsilon_{1 j} \\
\epsilon_{2 j} \\
\vdots \\
\epsilon_{i j}
\end{array}\right]}_{\mathbf{\epsilon}_j}
$$

Where

$$
\mathbf{\epsilon}_{j} \sim N_{I}(\mathbf{0}, \mathbf{\Theta})
$$

$$
\mathbf{\eta}_{j} \sim N_{K}(\mathbf{0}, \mathbf{\Psi}),
$$

And

$$
\mathbf{\Psi}=\mathrm{Cov}\begin{pmatrix}
\eta_{1j} \\
\eta_{2j} \\
\vdots \\
n_{ij}
\end{pmatrix}=
\begin{pmatrix}
\psi_{11} & \psi_{12} & \cdots & \psi_{1k} \\
\psi_{21} & \psi_{22} & \cdots & \psi_{2k} \\
\vdots & \vdots & \ddots & \vdots \\
\psi_{i1} & \psi_{i2} & \cdots & \psi_{ik}
\end{pmatrix}
$$

$$
\mathbf{\Theta}=\mathrm{Cov}
\begin{pmatrix}
\epsilon_{1 j} \\
\epsilon_{2 j} \\
\epsilon_{3 j} \\
\vdots \\
\epsilon_{i j}
\end{pmatrix} =
\begin{pmatrix}
\theta_{11} & 0 & \cdots & 0 \\
0 & \theta_{22} & \cdots & 0 \\
\vdots & \vdots & \ddots & \vdots \\
0 & 0 & \cdots & \theta_{ii}
\end{pmatrix}
$$

We can derive $\mathbf{\beta}$ by assuming the mean for each item of each construct is the same, $\beta_{ijk} = \mu_k$.

```{r}
items_per_construct <- c(3,3,3,3,4,4,4)
beta <- rep(construct_means, items_per_construct)
```

The covariance matrix is $\mathbf{\Psi}$, which we derived from the given correlation matrix.

```{r}
psi <- cov_matrix
```

For $\mathbf{\Theta}$ we need to determine the error of each item. Since we only have there reliability for each construct, we'll need to derive each $\theta_{ii}$, or the covariance for each item. We are given the reliability of each construct $R_{kk}$, which is an estimate of the correlation coefficient of each construct. The covariance $\epsilon_k$, then, for each construct is $(1 - R_{kk})^2$. The linear combination of the covariance of each item $x_i$ in construct $k$ is $\epsilon_k = \frac{\sum_1^ix_{i}}{N_i}$. If $x_1 = x_2 ...= x_i$, then $\epsilon_k = \frac{N_ix}{N_i} = x$. Therefore, each $\theta_{ii} = (1 - R_{kk})^2$ for each $i$ in each $k$.

So, for each construct we will use one minus its reliability for the covariance of its error term to construct $\mathbf{\Theta}$ .

```{r}
sigma_k <- (1 - reliabilities)^2 #construct error variance
theta <- sigma_k |> 
  rep(items_per_construct) |> 
  diag(sum(items_per_construct), sum(items_per_construct))
```

::: callout-note
We know the average loading for each item on each construct, but we don't know what each item loading is exactly.
:::

Finally, we need $\mathbf{\Lambda}$. In measurement theory, the reliability $r_{11}$ is defined as $r_{11} = \frac{\sigma^2_t}{\sigma^2_x}$ where $t$ is the true factor score and $x$ is the measured score[@nunnally_psychometric_1994, eq. 6-9] . Therefore, $\sigma_t^2 = r_{11}\sigma_x^2$. $\sigma_x^2$ is represented by $\mathbf{\Psi}$, so $\mathbf{\Lambda}$ can be represented by the reliability for each construct $r_{kk}$

```{r}
# Create a matrix filled with zeros with rows equal to the total number of items
# and columns equal to the number of factors

#TODO change zeros to normally random loadings 
lambda <- matrix(0, nrow = sum(items_per_construct), ncol = length(items_per_construct))

# Fill the matrix with the 1s where each factor loads onto the corresponding items
start_index <- 1
for (i in seq_along(items_per_construct)) {
  end_index <- start_index + items_per_construct[i] - 1
  lambda[start_index:end_index, i] <- reliabilities[i]
  start_index <- end_index + 1
}
```

We can now use all of the components to generate a data set

```{r}
J <- 500

# generate random factor scores for each construct on each subject
eta <- MASS::mvrnorm(J, mu = rep(0, nrow(psi)), Sigma = psi)

# generate error terms for each item for each subject
epsilon <- MASS::mvrnorm(J, mu = rep(0, ncol(theta)),Sigma = theta)


Y <- beta + tcrossprod(eta, lambda) + epsilon 

Y <- Y |> round() # turn in to likert.  Should already be normally distributed
Y[Y==0] <- 1 #capture those that end up just below 0.5 and just above 7.5
Y[Y==8] <- 7

item_names <- mapply(\(name, num) 
                     paste0(name, seq(num)), var_names, items_per_construct, SIMPLIFY = FALSE) |>
  unlist()

cfa_data  <-  Y |> as.data.frame() |> setNames(item_names)
cfa_data
```

Save the simulated data to allow for later use.

```{r}
cfa_data |> readr::write_csv(file.path(getwd(), "_data", "baseline.csv"))
```

## Download the Data

Click on the button to download the data

```{r}
#| echo: false
library(downloadthis)
cfa_data |>
  download_this(
    output_name = "simulated_cmv_data",
    output_extension = ".xlsx",
    button_label = "Download data",
    button_type = "warning",
    has_icon = TRUE,
    icon = "fa fa-save"
  )
```

## Check the Simulated Data

Let's see what the results are when we try to fit the data to the model

```{r}
fit<- cfa(cfa_sim_model, cfa_data, meanstructure = TRUE)
summary(fit)
```
