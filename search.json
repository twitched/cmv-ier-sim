[
  {
    "objectID": "SimpleCMVSimulation.html",
    "href": "SimpleCMVSimulation.html",
    "title": "Simple CVM Simulation",
    "section": "",
    "text": "In this document, we’ll do a simple CMV Simulation to show that our technique works. We’ll then use the same technique on our real data"
  },
  {
    "objectID": "SimpleCMVSimulation.html#simple-cmv-simulation",
    "href": "SimpleCMVSimulation.html#simple-cmv-simulation",
    "title": "Simple CVM Simulation",
    "section": "",
    "text": "In this document, we’ll do a simple CMV Simulation to show that our technique works. We’ll then use the same technique on our real data"
  },
  {
    "objectID": "SimpleCMVSimulation.html#initialization",
    "href": "SimpleCMVSimulation.html#initialization",
    "title": "Simple CVM Simulation",
    "section": "Initialization",
    "text": "Initialization\nWe will need the following projects:\n\ntidyverse: Data wrangling\nlavaan: SEM functionality\nsimstandard: Does lavaan simulation properly (lavaan’s SimulateData() has problems) and provides some handy functions for working with SEM data in data frames\nsemPlot: Plotting SEM diagrams\n\nWe’ll also set the random seed to an arbitrary fixed value to allow for reproduceability\n\nlibrary(tidyverse)\nlibrary(lavaan)\nlibrary(simstandard)\nlibrary(semPlot)\n\nset.seed(1337)"
  },
  {
    "objectID": "SimpleCMVSimulation.html#model",
    "href": "SimpleCMVSimulation.html#model",
    "title": "Simple CVM Simulation",
    "section": "Model",
    "text": "Model\nOur model has three latent variables that are each measured with two or three items. Additionally, each item is measured using a 5-likert scale.\n\nX\n\nx1\nx2\nx3\n\nY\n\ny1\ny2\ny3\n\nZ\n\nz1\nz2\nz3\n\n\nWe’ll input the model in lavaan formula syntax and have it create an SEM diagram for us\n\ncfa_model &lt;- '\n  # measurement model\n  X =~ x1 + x2 + x3\n  Y =~ y1 + y2 + y3\n  Z =~ z1 + z2 + z3\n  \n  # covariances\n  X ~~ Y\n  Y ~~ Z\n  X ~~ Z\n'\n\nsemPlotModel_lavaanModel(cfa_model) |&gt; \n  semPaths(layout=\"tree\", rotation=2, nCharNodes=5, sizeMan2 = 2.5, mar = c(1,4,1,3), label.norm = \"OOOOO\", residuals = FALSE)"
  },
  {
    "objectID": "SimpleCMVSimulation.html#simulation",
    "href": "SimpleCMVSimulation.html#simulation",
    "title": "Simple CVM Simulation",
    "section": "Simulation",
    "text": "Simulation\nTo simulate, we need to set the parameter values. We’ll do this for each kind of parameter. Before we do that, though, we need to convert the model to a lavaan parameter table.\n\ncfa_model_pars &lt;- lavaanify(cfa_model, std.lv = TRUE)\n\n\nparameters\nWe’ll create a value for each parameter\n\nloadings &lt;- 0.6\ncovariances &lt;- 0.1\ncfa_model_pars &lt;- cfa_model_pars |&gt; \n  mutate(ustart = ifelse(op == \"=~\", loadings, ustart)) |&gt;\n  rowwise() |&gt; mutate(ustart = ifelse(op == \"~~\" && lhs != rhs, covariances, ustart)) |&gt; ungroup() |&gt; as.data.frame()\n\n\ncfa_sim &lt;- sim_standardized(cfa_model_pars, latent = FALSE, errors = FALSE, factor_scores = FALSE, composites = FALSE, matrices = FALSE)\n\nWarning in lavaan::lavParTable(m, fixed.x = F): lavaan WARNING: input already\nlooks like a parameter table; returning as is\n\n\nWarning in sim_standardized_matrices(m, ...): Because the following relationship was not set, it is assumed to be 0:\nX =~ x1\n\n\nWarning in lavaan::lavaanify(., fixed.x = FALSE): lavaan WARNING: input already\nlooks like a parameter table; returning as is\n\n#cfa_sim &lt;- simulateData(cfa_model_pars, model.type = \"cfa\")\n#change to likert scores\ncfa_sim &lt;- cfa_sim |&gt; mutate(across(everything(), \\(x) findInterval(x, vec=c(-Inf,-1,-0.5, 0.5,1,Inf))))\ncfa_sim\n\n\n\n  \n\n\n\nCheck the fit of the simulation\n\nfit &lt;- cfa(cfa_model, cfa_sim, ordered = TRUE, parameterization = \"theta\", std.lv = TRUE)\nsummary(fit, fit.measures = TRUE)\n\nlavaan 0.6.16 ended normally after 39 iterations\n\n  Estimator                                       DWLS\n  Optimization method                           NLMINB\n  Number of model parameters                        48\n\n  Number of observations                          1000\n\nModel Test User Model:\n                                              Standard      Scaled\n  Test Statistic                                14.408      18.929\n  Degrees of freedom                                24          24\n  P-value (Chi-square)                           0.937       0.756\n  Scaling correction factor                                  0.868\n  Shift parameter                                            2.332\n    simple second-order correction                                \n\nModel Test Baseline Model:\n\n  Test statistic                              1341.312    1126.235\n  Degrees of freedom                                36          36\n  P-value                                        0.000       0.000\n  Scaling correction factor                                  1.197\n\nUser Model versus Baseline Model:\n\n  Comparative Fit Index (CFI)                    1.000       1.000\n  Tucker-Lewis Index (TLI)                       1.011       1.007\n                                                                  \n  Robust Comparative Fit Index (CFI)                         1.000\n  Robust Tucker-Lewis Index (TLI)                            1.014\n\nRoot Mean Square Error of Approximation:\n\n  RMSEA                                          0.000       0.000\n  90 Percent confidence interval - lower         0.000       0.000\n  90 Percent confidence interval - upper         0.006       0.019\n  P-value H_0: RMSEA &lt;= 0.050                    1.000       1.000\n  P-value H_0: RMSEA &gt;= 0.080                    0.000       0.000\n                                                                  \n  Robust RMSEA                                               0.000\n  90 Percent confidence interval - lower                     0.000\n  90 Percent confidence interval - upper                     0.015\n  P-value H_0: Robust RMSEA &lt;= 0.050                         1.000\n  P-value H_0: Robust RMSEA &gt;= 0.080                         0.000\n\nStandardized Root Mean Square Residual:\n\n  SRMR                                           0.020       0.020\n\nParameter Estimates:\n\n  Standard errors                           Robust.sem\n  Information                                 Expected\n  Information saturated (h1) model        Unstructured\n\nLatent Variables:\n                   Estimate  Std.Err  z-value  P(&gt;|z|)\n  X =~                                                \n    x1                0.772    0.082    9.397    0.000\n    x2                0.745    0.077    9.682    0.000\n    x3                0.766    0.083    9.245    0.000\n  Y =~                                                \n    y1                0.772    0.085    9.082    0.000\n    y2                0.760    0.087    8.739    0.000\n    y3                0.673    0.072    9.369    0.000\n  Z =~                                                \n    z1                0.701    0.069   10.207    0.000\n    z2                0.871    0.087    9.967    0.000\n    z3                0.820    0.081   10.162    0.000\n\nCovariances:\n                   Estimate  Std.Err  z-value  P(&gt;|z|)\n  X ~~                                                \n    Y                 0.074    0.053    1.398    0.162\n  Y ~~                                                \n    Z                 0.008    0.051    0.153    0.879\n  X ~~                                                \n    Z                 0.158    0.051    3.133    0.002\n\nIntercepts:\n                   Estimate  Std.Err  z-value  P(&gt;|z|)\n   .x1                0.000                           \n   .x2                0.000                           \n   .x3                0.000                           \n   .y1                0.000                           \n   .y2                0.000                           \n   .y3                0.000                           \n   .z1                0.000                           \n   .z2                0.000                           \n   .z3                0.000                           \n    X                 0.000                           \n    Y                 0.000                           \n    Z                 0.000                           \n\nThresholds:\n                   Estimate  Std.Err  z-value  P(&gt;|z|)\n    x1|t1            -1.337    0.076  -17.544    0.000\n    x1|t2            -0.652    0.057  -11.474    0.000\n    x1|t3             0.673    0.058   11.560    0.000\n    x1|t4             1.267    0.075   16.976    0.000\n    x2|t1            -1.146    0.067  -17.056    0.000\n    x2|t2            -0.545    0.054  -10.175    0.000\n    x2|t3             0.686    0.057   12.053    0.000\n    x2|t4             1.303    0.073   17.873    0.000\n    x3|t1            -1.295    0.075  -17.163    0.000\n    x3|t2            -0.632    0.056  -11.197    0.000\n    x3|t3             0.675    0.058   11.613    0.000\n    x3|t4             1.289    0.077   16.824    0.000\n    y1|t1            -1.298    0.076  -16.996    0.000\n    y1|t2            -0.641    0.057  -11.265    0.000\n    y1|t3             0.605    0.057   10.641    0.000\n    y1|t4             1.205    0.072   16.654    0.000\n    y2|t1            -1.265    0.076  -16.564    0.000\n    y2|t2            -0.677    0.057  -11.782    0.000\n    y2|t3             0.532    0.056    9.570    0.000\n    y2|t4             1.126    0.071   15.791    0.000\n    y3|t1            -1.239    0.067  -18.603    0.000\n    y3|t2            -0.629    0.053  -11.894    0.000\n    y3|t3             0.587    0.053   11.141    0.000\n    y3|t4             1.199    0.066   18.024    0.000\n    z1|t1            -1.240    0.067  -18.538    0.000\n    z1|t2            -0.592    0.053  -11.156    0.000\n    z1|t3             0.616    0.053   11.635    0.000\n    z1|t4             1.137    0.064   17.803    0.000\n    z2|t1            -1.386    0.082  -16.996    0.000\n    z2|t2            -0.673    0.061  -11.073    0.000\n    z2|t3             0.661    0.059   11.240    0.000\n    z2|t4             1.292    0.076   16.955    0.000\n    z3|t1            -1.302    0.076  -17.111    0.000\n    z3|t2            -0.612    0.057  -10.707    0.000\n    z3|t3             0.616    0.057   10.854    0.000\n    z3|t4             1.329    0.075   17.780    0.000\n\nVariances:\n                   Estimate  Std.Err  z-value  P(&gt;|z|)\n   .x1                1.000                           \n   .x2                1.000                           \n   .x3                1.000                           \n   .y1                1.000                           \n   .y2                1.000                           \n   .y3                1.000                           \n   .z1                1.000                           \n   .z2                1.000                           \n   .z3                1.000                           \n    X                 1.000                           \n    Y                 1.000                           \n    Z                 1.000                           \n\nScales y*:\n                   Estimate  Std.Err  z-value  P(&gt;|z|)\n    x1                0.791                           \n    x2                0.802                           \n    x3                0.794                           \n    y1                0.792                           \n    y2                0.796                           \n    y3                0.830                           \n    z1                0.819                           \n    z2                0.754                           \n    z3                0.773"
  },
  {
    "objectID": "SimpleCMVSimulation.html#model-with-cmv",
    "href": "SimpleCMVSimulation.html#model-with-cmv",
    "title": "Simple CVM Simulation",
    "section": "Model with CMV",
    "text": "Model with CMV\nLet’s add the CMV\n\ncmv_model &lt;- '\n  # measurement model\n  X =~ 0.6*x1 + 0.6*x2 + 0.6*x3\n  Y =~ 0.6*y1 + 0.6*y2 + 0.6*y3\n  Z =~ 0.6*z1 + 0.6*z2 + 0.6*z3\n  CMV =~ 0.5*x1 + 0.5*x2 + 0.5*x3 + 0.5*y1 + 0.5*y2 + 0.5*z1 + 0.5*z2 + 0.5*z3\n\n  # covariances\n  X ~~ 0.1*Y\n  Y ~~ 0.1*Z\n  X ~~ 0.1*Z\n  X ~~ 0*CMV\n  Y ~~ 0*CMV\n  Z ~~ 0*CMV\n'\n\nsemPlotModel_lavaanModel(cmv_model) |&gt; \n  semPaths(layout=\"tree\", rotation=2, nCharNodes=5, sizeMan2 = 2.5, mar = c(1,4,1,3), label.norm = \"OOOOO\", residuals = FALSE)\n\n\n\n\n\n# lmodel &lt;- lavaanify(cmv_model, std.lv = TRUE)\n# loadings &lt;- 0.6\n# covariances &lt;- 0.1\n# cmv &lt;- 0\n# lmodel &lt;- lmodel |&gt; rowwise() |&gt;\n#   mutate(ustart = ifelse(op == \"=~\" && lhs != \"CMV\", loadings, ustart)) |&gt;\n#   mutate(ustart = ifelse(op == \"=~\" && lhs == \"CMV\", cmv, ustart)) |&gt;\n#   mutate(ustart = ifelse(op == \"~~\" && lhs != rhs, covariances, ustart)) |&gt; ungroup() |&gt; as.data.frame()\n\nSimulate and fit this one\n\ncmv_sim &lt;- sim_standardized(cmv_model, latent = FALSE, errors = FALSE, factor_scores = FALSE, composites = FALSE, matrices = FALSE)\n#change to likert scores\ncmv_sim &lt;- cmv_sim |&gt; mutate(across(everything(), \\(x) findInterval(x, vec=c(-Inf,-1,-0.5, 0.5,1,Inf))))\ncmv_sim\n\n\n\n  \n\n\n\nCheck the fit of the simulation\n\ncmv_fit &lt;- cfa(cfa_model, cmv_sim, ordered = TRUE, parameterization = \"theta\", std.lv = TRUE)\n#cmv_fit &lt;- cfa(cfa_model, cmv_sim, std.lv = TRUE)\nsummary(cmv_fit, fit.measures = TRUE)\n\nlavaan 0.6.16 ended normally after 54 iterations\n\n  Estimator                                       DWLS\n  Optimization method                           NLMINB\n  Number of model parameters                        48\n\n  Number of observations                          1000\n\nModel Test User Model:\n                                              Standard      Scaled\n  Test Statistic                                43.084      71.015\n  Degrees of freedom                                24          24\n  P-value (Chi-square)                           0.010       0.000\n  Scaling correction factor                                  0.639\n  Shift parameter                                            3.539\n    simple second-order correction                                \n\nModel Test Baseline Model:\n\n  Test statistic                              6289.301    4080.706\n  Degrees of freedom                                36          36\n  P-value                                        0.000       0.000\n  Scaling correction factor                                  1.546\n\nUser Model versus Baseline Model:\n\n  Comparative Fit Index (CFI)                    0.997       0.988\n  Tucker-Lewis Index (TLI)                       0.995       0.983\n                                                                  \n  Robust Comparative Fit Index (CFI)                         0.992\n  Robust Tucker-Lewis Index (TLI)                            0.988\n\nRoot Mean Square Error of Approximation:\n\n  RMSEA                                          0.028       0.044\n  90 Percent confidence interval - lower         0.014       0.033\n  90 Percent confidence interval - upper         0.042       0.056\n  P-value H_0: RMSEA &lt;= 0.050                    0.997       0.770\n  P-value H_0: RMSEA &gt;= 0.080                    0.000       0.000\n                                                                  \n  Robust RMSEA                                               0.032\n  90 Percent confidence interval - lower                     0.013\n  90 Percent confidence interval - upper                     0.049\n  P-value H_0: Robust RMSEA &lt;= 0.050                         0.960\n  P-value H_0: Robust RMSEA &gt;= 0.080                         0.000\n\nStandardized Root Mean Square Residual:\n\n  SRMR                                           0.033       0.033\n\nParameter Estimates:\n\n  Standard errors                           Robust.sem\n  Information                                 Expected\n  Information saturated (h1) model        Unstructured\n\nLatent Variables:\n                   Estimate  Std.Err  z-value  P(&gt;|z|)\n  X =~                                                \n    x1                1.300    0.092   14.130    0.000\n    x2                1.308    0.102   12.792    0.000\n    x3                1.203    0.087   13.749    0.000\n  Y =~                                                \n    y1                1.291    0.133    9.683    0.000\n    y2                1.425    0.162    8.776    0.000\n    y3                0.419    0.045    9.278    0.000\n  Z =~                                                \n    z1                1.180    0.090   13.159    0.000\n    z2                1.159    0.085   13.620    0.000\n    z3                1.173    0.085   13.869    0.000\n\nCovariances:\n                   Estimate  Std.Err  z-value  P(&gt;|z|)\n  X ~~                                                \n    Y                 0.417    0.036   11.628    0.000\n  Y ~~                                                \n    Z                 0.414    0.037   11.329    0.000\n  X ~~                                                \n    Z                 0.473    0.035   13.629    0.000\n\nIntercepts:\n                   Estimate  Std.Err  z-value  P(&gt;|z|)\n   .x1                0.000                           \n   .x2                0.000                           \n   .x3                0.000                           \n   .y1                0.000                           \n   .y2                0.000                           \n   .y3                0.000                           \n   .z1                0.000                           \n   .z2                0.000                           \n   .z3                0.000                           \n    X                 0.000                           \n    Y                 0.000                           \n    Z                 0.000                           \n\nThresholds:\n                   Estimate  Std.Err  z-value  P(&gt;|z|)\n    x1|t1            -1.658    0.097  -17.022    0.000\n    x1|t2            -0.836    0.074  -11.267    0.000\n    x1|t3             0.827    0.074   11.108    0.000\n    x1|t4             1.658    0.097   17.170    0.000\n    x2|t1            -1.658    0.105  -15.763    0.000\n    x2|t2            -0.873    0.077  -11.310    0.000\n    x2|t3             0.715    0.074    9.730    0.000\n    x2|t4             1.452    0.095   15.216    0.000\n    x3|t1            -1.601    0.094  -17.122    0.000\n    x3|t2            -0.866    0.072  -11.965    0.000\n    x3|t3             0.776    0.070   11.035    0.000\n    x3|t4             1.518    0.090   16.842    0.000\n    y1|t1            -1.714    0.124  -13.834    0.000\n    y1|t2            -0.861    0.084  -10.287    0.000\n    y1|t3             0.828    0.085    9.726    0.000\n    y1|t4             1.644    0.125   13.136    0.000\n    y2|t1            -1.746    0.148  -11.832    0.000\n    y2|t2            -0.964    0.098   -9.800    0.000\n    y2|t3             0.824    0.094    8.751    0.000\n    y2|t4             1.634    0.140   11.657    0.000\n    y3|t1            -1.092    0.053  -20.621    0.000\n    y3|t2            -0.597    0.046  -13.043    0.000\n    y3|t3             0.513    0.045   11.359    0.000\n    y3|t4             1.074    0.053   20.385    0.000\n    z1|t1            -1.721    0.099  -17.454    0.000\n    z1|t2            -0.883    0.073  -12.057    0.000\n    z1|t3             0.749    0.070   10.713    0.000\n    z1|t4             1.526    0.092   16.588    0.000\n    z2|t1            -1.600    0.092  -17.368    0.000\n    z2|t2            -0.838    0.070  -11.996    0.000\n    z2|t3             0.686    0.068   10.134    0.000\n    z2|t4             1.473    0.088   16.763    0.000\n    z3|t1            -1.558    0.089  -17.485    0.000\n    z3|t2            -0.817    0.070  -11.639    0.000\n    z3|t3             0.756    0.069   10.992    0.000\n    z3|t4             1.495    0.086   17.290    0.000\n\nVariances:\n                   Estimate  Std.Err  z-value  P(&gt;|z|)\n   .x1                1.000                           \n   .x2                1.000                           \n   .x3                1.000                           \n   .y1                1.000                           \n   .y2                1.000                           \n   .y3                1.000                           \n   .z1                1.000                           \n   .z2                1.000                           \n   .z3                1.000                           \n    X                 1.000                           \n    Y                 1.000                           \n    Z                 1.000                           \n\nScales y*:\n                   Estimate  Std.Err  z-value  P(&gt;|z|)\n    x1                0.610                           \n    x2                0.607                           \n    x3                0.639                           \n    y1                0.612                           \n    y2                0.574                           \n    y3                0.922                           \n    z1                0.647                           \n    z2                0.653                           \n    z3                0.649                           \n\n\nCompare the two models\n\nanova(fit, cmv_fit)\n\nWarning in lavTestLRT(object = object, ..., model.names = NAMES): lavaan\nWARNING: some models have the same degrees of freedom"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "CMV Simulation Main",
    "section": "",
    "text": "This is a collection of CVM Simulations for the CMV IER project by Doug Twitchell, Elizabeth Raglund, Christie Fuller, and Marcia Simmering."
  },
  {
    "objectID": "index.html#cmv-simulation",
    "href": "index.html#cmv-simulation",
    "title": "CMV Simulation Main",
    "section": "",
    "text": "This is a collection of CVM Simulations for the CMV IER project by Doug Twitchell, Elizabeth Raglund, Christie Fuller, and Marcia Simmering."
  },
  {
    "objectID": "index.html#simulations",
    "href": "index.html#simulations",
    "title": "CMV Simulation Main",
    "section": "Simulations",
    "text": "Simulations\n\nSimulation 1 - First attempt\nSimulation 1\nThis was the first attempt to use lavaan to simulate data for CMV. In it there is no CMV or IER. Nor does it really create good data since the thresholds aren’t modeled in lavaan. Instead they are simply added afterward. Also, in this simulation I attempted modeling a mean structure, but that caused the model to not converge. I don’t believe a mean structure is needed.\n\n\nSimulation 2 - Base model with no CMV or IER\nSimulation 2\n(clark2018?) provides a chapter on how IRT is modeled in SEM. In this simulation I follow this chapter to create a base model from which to create simulated data."
  },
  {
    "objectID": "CMVSimulation.html",
    "href": "CMVSimulation.html",
    "title": "CMV Simulation",
    "section": "",
    "text": "This document will go through simulating CMV and IEP."
  },
  {
    "objectID": "CMVSimulation.html#cmv-simulation",
    "href": "CMVSimulation.html#cmv-simulation",
    "title": "CMV Simulation",
    "section": "",
    "text": "This document will go through simulating CMV and IEP."
  },
  {
    "objectID": "CMVSimulation.html#initialization",
    "href": "CMVSimulation.html#initialization",
    "title": "CMV Simulation",
    "section": "Initialization",
    "text": "Initialization\nWe will need the following projects:\n\ntidyverse: Data wrangling\nlavaan: SEM functionality\nsemPlot: Plotting SEM diagrams\n\nWe’ll also set the random seed to an arbitrary fixed value to allow for reproduceability\n\nlibrary(tidyverse)\nlibrary(lavaan)\nlibrary(semPlot)\n\nset.seed(1337)"
  },
  {
    "objectID": "CMVSimulation.html#model",
    "href": "CMVSimulation.html#model",
    "title": "CMV Simulation",
    "section": "Model",
    "text": "Model\nOur model has three latent variables that are each measured with several items:\n\nMobile phone addiction: phone_add\n\nMissed Work: mw\nConcentration: conc\nPain: pain\nRequire Phone: reqp\nImpatient: imp\nThinking: think\nNever Give Up: ngu\nConstant Checking: check\nExtended Usage: use\nPerceived Extended Usage: puse\n\nPerceived Stress: stress\n\nUpset: upset\nUnable to Control: nocont\nNervous: nerv\nIrritating Hassles: hass\nCoping: cope\nConfident: conf\nGoing Your Way: way\nNo Cope: nocope\nControl: cont\nOn Top: ontop\nAngered: angr\nAnxious: anx\nControl Time: time\nPiling: pile\n\nPerceived Learning: plearn\n\nOrganize: org\nGuide: guid\nUse Knowledge: usek\nAttitude: att\nCritique: crit\nSelf-Reliant: selfr\nSophisticated: soph\n\n\nWe’ll input the model in lavaan formula syntax and have it create an SEM diagram for us\n\ncfa_model &lt;- '\n  # measurement model\n  phone_add =~ mw + conc + .5*pain + reqp + imp + 5*think + ngu + check + use + puse\n  stress =~ upset + nocont + .4*nerv + hass + cop + 4*conf + way + nocope + cont + ontop + angr + anx + time + pile\n  plearn =~ org + guid + usek + att + crit + selfr + soph\n  \n  # covariances\n  phone_add ~~ stress\n  phone_add ~~ plearn\n  stress ~~ plearn\n'\n\nsemPlotModel_lavaanModel(cfa_model) |&gt; \n  semPaths(layout=\"tree\", rotation=2, nCharNodes=5, sizeMan2 = 2.5, mar = c(1,4,1,3), label.norm = \"OOOOO\", residuals = FALSE)"
  },
  {
    "objectID": "CMVSimulation.html#simulation",
    "href": "CMVSimulation.html#simulation",
    "title": "CMV Simulation",
    "section": "Simulation",
    "text": "Simulation\nNow we’ll simulate data for this model. In this case all item weights are simulated as being equal\n\n\n\n\n\n\nNote\n\n\n\nRight now everything is coded in the same direction. Will need to fix loading at -1 for reverse coded items\n\n\n\ncfa_sim &lt;- simulateData(cfa_model, model.type = \"cfa\", sample.nobs = 500)\n#change to likert scores\ncfa_sim &lt;- cfa_sim |&gt; mutate(across(everything(), \\(x) findInterval(x, vec=c(-Inf,-2.5,-1, 1,2.5,Inf))))\ncfa_sim\n\n\n\n  \n\n\n\nCheck the fit of the simulation\n\nfit &lt;- cfa(cfa_model, cfa_sim, ordered = TRUE)\n\nWarning in lav_object_post_check(object): lavaan WARNING: some estimated ov\nvariances are negative\n\nsummary(fit)\n\nlavaan 0.6.16 ended normally after 59 iterations\n\n  Estimator                                       DWLS\n  Optimization method                           NLMINB\n  Number of model parameters                       154\n\n  Number of observations                           500\n\nModel Test User Model:\n                                              Standard      Scaled\n  Test Statistic                              3006.143    2265.116\n  Degrees of freedom                               435         435\n  P-value (Chi-square)                           0.000       0.000\n  Scaling correction factor                                  1.468\n  Shift parameter                                          217.111\n    simple second-order correction                                \n\nParameter Estimates:\n\n  Standard errors                           Robust.sem\n  Information                                 Expected\n  Information saturated (h1) model        Unstructured\n\nLatent Variables:\n                   Estimate  Std.Err  z-value  P(&gt;|z|)\n  phone_add =~                                        \n    mw                1.000                           \n    conc              2.961    0.125   23.628    0.000\n    pain              0.500                           \n    reqp              3.080    0.120   25.712    0.000\n    imp               2.954    0.123   23.975    0.000\n    think             5.000                           \n    ngu               3.072    0.121   25.360    0.000\n    check             2.910    0.122   23.924    0.000\n    use               3.028    0.126   24.078    0.000\n    puse              3.111    0.107   29.206    0.000\n  stress =~                                           \n    upset             1.000                           \n    nocont            2.450    0.105   23.284    0.000\n    nerv              0.400                           \n    hass              2.624    0.095   27.606    0.000\n    cop               2.660    0.098   27.253    0.000\n    conf              4.000                           \n    way               2.549    0.100   25.479    0.000\n    nocope            2.543    0.095   26.755    0.000\n    cont              2.690    0.091   29.536    0.000\n    ontop             2.633    0.095   27.748    0.000\n    angr              2.448    0.107   22.795    0.000\n    anx               2.428    0.108   22.454    0.000\n    time              2.563    0.101   25.374    0.000\n    pile              2.599    0.097   26.909    0.000\n  plearn =~                                           \n    org               1.000                           \n    guid              0.987    0.056   17.606    0.000\n    usek              0.894    0.054   16.619    0.000\n    att               0.964    0.054   17.716    0.000\n    crit              1.032    0.057   17.973    0.000\n    selfr             0.996    0.056   17.688    0.000\n    soph              0.938    0.056   16.760    0.000\n\nCovariances:\n                   Estimate  Std.Err  z-value  P(&gt;|z|)\n  phone_add ~~                                        \n    stress            0.002    0.003    0.642    0.521\n    plearn            0.011    0.009    1.327    0.184\n  stress ~~                                           \n    plearn           -0.012    0.010   -1.185    0.236\n\nIntercepts:\n                   Estimate  Std.Err  z-value  P(&gt;|z|)\n   .mw                0.000                           \n   .conc              0.000                           \n   .pain              0.000                           \n   .reqp              0.000                           \n   .imp               0.000                           \n   .think             0.000                           \n   .ngu               0.000                           \n   .check             0.000                           \n   .use               0.000                           \n   .puse              0.000                           \n   .upset             0.000                           \n   .nocont            0.000                           \n   .nerv              0.000                           \n   .hass              0.000                           \n   .cop               0.000                           \n   .conf              0.000                           \n   .way               0.000                           \n   .nocope            0.000                           \n   .cont              0.000                           \n   .ontop             0.000                           \n   .angr              0.000                           \n   .anx               0.000                           \n   .time              0.000                           \n   .pile              0.000                           \n   .org               0.000                           \n   .guid              0.000                           \n   .usek              0.000                           \n   .att               0.000                           \n   .crit              0.000                           \n   .selfr             0.000                           \n   .soph              0.000                           \n    phone_add         0.000                           \n    stress            0.000                           \n    plearn            0.000                           \n\nThresholds:\n                   Estimate  Std.Err  z-value  P(&gt;|z|)\n    mw|t1            -1.751    0.102  -17.198    0.000\n    mw|t2            -0.719    0.062  -11.655    0.000\n    mw|t3             0.719    0.062   11.655    0.000\n    mw|t4             1.751    0.102   17.198    0.000\n    conc|t1          -1.626    0.093  -17.405    0.000\n    conc|t2          -0.674    0.061  -11.057    0.000\n    conc|t3           0.674    0.061   11.057    0.000\n    conc|t4           1.799    0.105   17.059    0.000\n    pain|t1          -2.097    0.134  -15.597    0.000\n    pain|t2          -0.878    0.065  -13.565    0.000\n    pain|t3           0.938    0.066   14.203    0.000\n    pain|t4           2.097    0.134   15.597    0.000\n    reqp|t1          -1.685    0.097  -17.334    0.000\n    reqp|t2          -0.674    0.061  -11.057    0.000\n    reqp|t3           0.726    0.062   11.739    0.000\n    reqp|t4           1.852    0.110   16.873    0.000\n    imp|t1           -1.751    0.102  -17.198    0.000\n    imp|t2           -0.745    0.062  -11.993    0.000\n    imp|t3            0.681    0.061   11.143    0.000\n    imp|t4            1.706    0.099   17.297    0.000\n    think|t1         -0.473    0.058   -8.097    0.000\n    think|t2         -0.222    0.057   -3.928    0.000\n    think|t3          0.151    0.056    2.680    0.007\n    think|t4          0.412    0.058    7.127    0.000\n    ngu|t1           -1.728    0.100  -17.252    0.000\n    ngu|t2           -0.668    0.061  -10.971    0.000\n    ngu|t3            0.793    0.063   12.580    0.000\n    ngu|t4            1.751    0.102   17.198    0.000\n    check|t1         -1.706    0.099  -17.297    0.000\n    check|t2         -0.687    0.061  -11.228    0.000\n    check|t3          0.687    0.061   11.228    0.000\n    check|t4          1.852    0.110   16.873    0.000\n    use|t1           -1.706    0.099  -17.297    0.000\n    use|t2           -0.625    0.060  -10.368    0.000\n    use|t3            0.772    0.063   12.330    0.000\n    use|t4            1.774    0.104   17.134    0.000\n    puse|t1          -1.626    0.093  -17.405    0.000\n    puse|t2          -0.607    0.060  -10.109    0.000\n    puse|t3           0.668    0.061   10.971    0.000\n    puse|t4           1.799    0.105   17.059    0.000\n    upset|t1         -1.728    0.100  -17.252    0.000\n    upset|t2         -0.687    0.061  -11.228    0.000\n    upset|t3          0.793    0.063   12.580    0.000\n    upset|t4          1.852    0.110   16.873    0.000\n    nocont|t1        -1.685    0.097  -17.334    0.000\n    nocont|t2        -0.700    0.061  -11.399    0.000\n    nocont|t3         0.706    0.062   11.484    0.000\n    nocont|t4         1.881    0.112   16.758    0.000\n    nerv|t1          -2.512    0.203  -12.355    0.000\n    nerv|t2          -0.893    0.065  -13.726    0.000\n    nerv|t3           0.978    0.067   14.591    0.000\n    nerv|t4           2.878    0.315    9.124    0.000\n    hass|t1          -1.665    0.096  -17.364    0.000\n    hass|t2          -0.668    0.061  -10.971    0.000\n    hass|t3           0.668    0.061   10.971    0.000\n    hass|t4           1.728    0.100   17.252    0.000\n    cop|t1           -1.685    0.097  -17.334    0.000\n    cop|t2           -0.700    0.061  -11.399    0.000\n    cop|t3            0.813    0.063   12.829    0.000\n    cop|t4            1.706    0.099   17.297    0.000\n    conf|t1          -0.530    0.059   -8.975    0.000\n    conf|t2          -0.202    0.057   -3.572    0.000\n    conf|t3           0.279    0.057    4.908    0.000\n    conf|t4           0.706    0.062   11.484    0.000\n    way|t1           -1.774    0.104  -17.134    0.000\n    way|t2           -0.650    0.061  -10.714    0.000\n    way|t3            0.745    0.062   11.993    0.000\n    way|t4            1.751    0.102   17.198    0.000\n    nocope|t1        -1.685    0.097  -17.334    0.000\n    nocope|t2        -0.643    0.061  -10.627    0.000\n    nocope|t3         0.643    0.061   10.627    0.000\n    nocope|t4         1.751    0.102   17.198    0.000\n    cont|t1          -1.825    0.108  -16.973    0.000\n    cont|t2          -0.662    0.061  -10.886    0.000\n    cont|t3           0.706    0.062   11.484    0.000\n    cont|t4           1.626    0.093   17.405    0.000\n    ontop|t1         -1.706    0.099  -17.297    0.000\n    ontop|t2         -0.650    0.061  -10.714    0.000\n    ontop|t3          0.706    0.062   11.484    0.000\n    ontop|t4          1.943    0.118   16.474    0.000\n    angr|t1          -1.799    0.105  -17.059    0.000\n    angr|t2          -0.595    0.060   -9.935    0.000\n    angr|t3           0.765    0.063   12.246    0.000\n    angr|t4           1.706    0.099   17.297    0.000\n    anx|t1           -1.774    0.104  -17.134    0.000\n    anx|t2           -0.637    0.060  -10.541    0.000\n    anx|t3            0.732    0.062   11.824    0.000\n    anx|t4            1.825    0.108   16.973    0.000\n    time|t1          -1.728    0.100  -17.252    0.000\n    time|t2          -0.759    0.062  -12.162    0.000\n    time|t3           0.752    0.062   12.078    0.000\n    time|t4           1.799    0.105   17.059    0.000\n    pile|t1          -1.706    0.099  -17.297    0.000\n    pile|t2          -0.700    0.061  -11.399    0.000\n    pile|t3           0.719    0.062   11.655    0.000\n    pile|t4           1.706    0.099   17.297    0.000\n    org|t1           -1.706    0.099  -17.297    0.000\n    org|t2           -0.681    0.061  -11.143    0.000\n    org|t3            0.619    0.060   10.282    0.000\n    org|t4            1.799    0.105   17.059    0.000\n    guid|t1          -1.665    0.096  -17.364    0.000\n    guid|t2          -0.806    0.063  -12.746    0.000\n    guid|t3           0.739    0.062   11.909    0.000\n    guid|t4           1.706    0.099   17.297    0.000\n    usek|t1          -1.706    0.099  -17.297    0.000\n    usek|t2          -0.793    0.063  -12.580    0.000\n    usek|t3           0.687    0.061   11.228    0.000\n    usek|t4           1.645    0.095   17.388    0.000\n    att|t1           -1.706    0.099  -17.297    0.000\n    att|t2           -0.713    0.062  -11.570    0.000\n    att|t3            0.772    0.063   12.330    0.000\n    att|t4            1.852    0.110   16.873    0.000\n    crit|t1          -1.751    0.102  -17.198    0.000\n    crit|t2          -0.706    0.062  -11.484    0.000\n    crit|t3           0.662    0.061   10.886    0.000\n    crit|t4           1.751    0.102   17.198    0.000\n    selfr|t1         -1.706    0.099  -17.297    0.000\n    selfr|t2         -0.713    0.062  -11.570    0.000\n    selfr|t3          0.687    0.061   11.228    0.000\n    selfr|t4          1.685    0.097   17.334    0.000\n    soph|t1          -1.665    0.096  -17.364    0.000\n    soph|t2          -0.779    0.063  -12.413    0.000\n    soph|t3           0.662    0.061   10.886    0.000\n    soph|t4           1.728    0.100   17.252    0.000\n\nVariances:\n                   Estimate  Std.Err  z-value  P(&gt;|z|)\n   .mw                0.946                           \n   .conc              0.524                           \n   .pain              0.986                           \n   .reqp              0.484                           \n   .imp               0.526                           \n   .think            -0.358                           \n   .ngu               0.487                           \n   .check             0.540                           \n   .use               0.502                           \n   .puse              0.474                           \n   .upset             0.924                           \n   .nocont            0.545                           \n   .nerv              0.988                           \n   .hass              0.478                           \n   .cop               0.464                           \n   .conf             -0.213                           \n   .way               0.507                           \n   .nocope            0.510                           \n   .cont              0.451                           \n   .ontop             0.474                           \n   .angr              0.546                           \n   .anx               0.553                           \n   .time              0.502                           \n   .pile              0.488                           \n   .org               0.458                           \n   .guid              0.472                           \n   .usek              0.567                           \n   .att               0.496                           \n   .crit              0.422                           \n   .selfr             0.462                           \n   .soph              0.523                           \n    phone_add         0.054    0.002   35.422    0.000\n    stress            0.076    0.002   42.672    0.000\n    plearn            0.542    0.047   11.581    0.000\n\nScales y*:\n                   Estimate  Std.Err  z-value  P(&gt;|z|)\n    mw                1.000                           \n    conc              1.000                           \n    pain              1.000                           \n    reqp              1.000                           \n    imp               1.000                           \n    think             1.000                           \n    ngu               1.000                           \n    check             1.000                           \n    use               1.000                           \n    puse              1.000                           \n    upset             1.000                           \n    nocont            1.000                           \n    nerv              1.000                           \n    hass              1.000                           \n    cop               1.000                           \n    conf              1.000                           \n    way               1.000                           \n    nocope            1.000                           \n    cont              1.000                           \n    ontop             1.000                           \n    angr              1.000                           \n    anx               1.000                           \n    time              1.000                           \n    pile              1.000                           \n    org               1.000                           \n    guid              1.000                           \n    usek              1.000                           \n    att               1.000                           \n    crit              1.000                           \n    selfr             1.000                           \n    soph              1.000"
  },
  {
    "objectID": "CMVSimulation.html#means-and-standard-deviations",
    "href": "CMVSimulation.html#means-and-standard-deviations",
    "title": "CMV Simulation",
    "section": "Means and Standard Deviations",
    "text": "Means and Standard Deviations\nWe can add means and standard deviations to the latent variables by adding intercepts and variances\n\ncfa_sim_model_with_means &lt;- '\n  # measurement model\n  phone_add =~ mw + conc + pain + reqp + imp + think + ngu + check + use + puse\n  stress =~ upset + nocont + nerv + hass + cop + conf + way + nocope + cont + ontop + angr + anx + time + pile\n  plearn =~ org + guid + usek + att + crit + selfr + soph\n  \n  # covariances\n  phone_add ~~ stress\n  phone_add ~~ plearn\n  stress ~~ plearn\n  \n  # intercepts (means)\n  # set the means of each of the phone addiction measurements to 2\n  mw + conc + pain + reqp + imp + think + ngu + check + use + puse ~ 2*1\n  # set the means of each of the negative stress measurments to 4 but the postitive ones to 2\n  upset + nocont + nerv + hass + way + nocope + cont + ontop + angr + anx + time + pile ~ 4*1\n  cop + conf ~ 2*1\n  # set the means of the plearn measurments to 4\n  org + guid + usek + att + crit + selfr + soph ~ 3*1\n  \n  # variances\n  phone_add ~~ 1 * phone_add\n  stress ~~ 16 * stress\n  plearn ~~ 1 * plearn\n'\n\nsemPlotModel_lavaanModel(cfa_sim_model_with_means) |&gt; \n  semPaths(layout=\"tree2\", rotation=2, levels = c(5,6,11,12), nCharNodes=5, sizeMan2 = 2.5, mar = c(1,4,1,3), label.norm = \"OOOOO\", residuals = TRUE, intAtSide = TRUE)\n\n\n\n\n\nSimulate and fit with means and standard deviations\n\ncfa_sim_with_means &lt;- simulateData(cfa_sim_model_with_means, model.type = \"cfa\", sample.nobs = 500)\n#change to likert scores\ncfa_sim_with_means &lt;- cfa_sim_with_means |&gt; mutate(across(everything(), \\(x) findInterval(x, vec=c(-Inf,-2.5,-1, 1,2.5,Inf))))\ncfa_sim_with_means\n\n\n\n  \n\n\n\nCheck the fit of the simulation. First we need to remove the fixed means and variances\n\ncfa_model_with_means &lt;- '\n  # measurement model\n  phone_add =~ mw + conc + pain + reqp + imp + think + ngu + check + use + puse\n  stress =~ upset + nocont + nerv + hass + cop + conf + way + nocope + cont + ontop + angr + anx + time + pile\n  plearn =~ org + guid + usek + att + crit + selfr + soph\n  \n  # covariances\n  phone_add ~~ stress\n  phone_add ~~ plearn\n  stress ~~ plearn\n  \n  # intercepts (means)\n  mw + conc + pain + reqp + imp + think + ngu + check + use + puse ~ 1\n  upset + nocont + nerv + hass + way + nocope + cont + ontop + angr + anx + time + pile ~ 1\n  cop + conf ~ 1\n  org + guid + usek + att + crit + selfr + soph ~ 1\n  \n  # variances\n  phone_add ~~ phone_add\n  stress ~~ stress\n  plearn ~~ plearn\n'\n\nfit &lt;- cfa(cfa_model_with_means, cfa_sim_with_means) # ordered = TRUE does not identify\nsummary(fit)\n\nlavaan 0.6.16 ended normally after 69 iterations\n\n  Estimator                                         ML\n  Optimization method                           NLMINB\n  Number of model parameters                        96\n\n  Number of observations                           500\n\nModel Test User Model:\n                                                      \n  Test statistic                               640.062\n  Degrees of freedom                               431\n  P-value (Chi-square)                           0.000\n\nParameter Estimates:\n\n  Standard errors                             Standard\n  Information                                 Expected\n  Information saturated (h1) model          Structured\n\nLatent Variables:\n                   Estimate  Std.Err  z-value  P(&gt;|z|)\n  phone_add =~                                        \n    mw                1.000                           \n    conc              1.002    0.080   12.527    0.000\n    pain              0.964    0.079   12.141    0.000\n    reqp              1.033    0.079   13.011    0.000\n    imp               1.051    0.083   12.677    0.000\n    think             1.059    0.083   12.804    0.000\n    ngu               0.997    0.080   12.459    0.000\n    check             1.007    0.079   12.714    0.000\n    use               1.039    0.080   12.925    0.000\n    puse              0.990    0.081   12.284    0.000\n  stress =~                                           \n    upset             1.000                           \n    nocont            1.018    0.024   43.046    0.000\n    nerv              1.033    0.024   43.821    0.000\n    hass              1.029    0.023   44.137    0.000\n    cop               1.172    0.032   36.673    0.000\n    conf              1.167    0.032   37.016    0.000\n    way               1.037    0.023   44.805    0.000\n    nocope            1.009    0.023   43.279    0.000\n    cont              1.007    0.025   41.096    0.000\n    ontop             1.058    0.023   45.554    0.000\n    angr              1.005    0.023   43.505    0.000\n    anx               1.048    0.025   42.481    0.000\n    time              1.024    0.024   43.187    0.000\n    pile              1.038    0.022   46.385    0.000\n  plearn =~                                           \n    org               1.000                           \n    guid              1.231    0.117   10.529    0.000\n    usek              1.061    0.107    9.894    0.000\n    att               1.125    0.108   10.389    0.000\n    crit              1.135    0.109   10.407    0.000\n    selfr             1.173    0.113   10.394    0.000\n    soph              1.161    0.113   10.294    0.000\n\nCovariances:\n                   Estimate  Std.Err  z-value  P(&gt;|z|)\n  phone_add ~~                                        \n    stress            0.041    0.028    1.499    0.134\n    plearn           -0.007    0.010   -0.746    0.456\n  stress ~~                                           \n    plearn           -0.008    0.019   -0.439    0.661\n\nIntercepts:\n                   Estimate  Std.Err  z-value  P(&gt;|z|)\n   .mw                4.116    0.036  114.462    0.000\n   .conc              4.104    0.036  114.964    0.000\n   .pain              4.118    0.036  115.456    0.000\n   .reqp              4.142    0.035  117.831    0.000\n   .imp               4.080    0.037  110.505    0.000\n   .think             4.050    0.037  110.186    0.000\n   .ngu               4.082    0.036  114.160    0.000\n   .check             4.060    0.035  115.259    0.000\n   .use               4.086    0.036  114.692    0.000\n   .puse              4.088    0.036  113.184    0.000\n   .upset             4.286    0.052   81.695    0.000\n   .nocont            4.272    0.054   79.770    0.000\n   .nerv              4.256    0.054   78.694    0.000\n   .hass              4.252    0.054   78.999    0.000\n   .way               4.258    0.054   78.813    0.000\n   .nocope            4.270    0.053   80.549    0.000\n   .cont              4.266    0.054   79.624    0.000\n   .ontop             4.240    0.055   77.145    0.000\n   .angr              4.254    0.053   80.697    0.000\n   .anx               4.238    0.055   76.629    0.000\n   .time              4.268    0.054   79.305    0.000\n   .pile              4.226    0.054   78.667    0.000\n   .cop               3.700    0.064   57.505    0.000\n   .conf              3.706    0.064   58.026    0.000\n   .org               4.578    0.027  167.857    0.000\n   .guid              4.544    0.030  151.120    0.000\n   .usek              4.524    0.028  158.874    0.000\n   .att               4.564    0.028  162.606    0.000\n   .crit              4.558    0.028  161.425    0.000\n   .selfr             4.552    0.029  155.712    0.000\n   .soph              4.550    0.029  154.884    0.000\n    phone_add         0.000                           \n    stress            0.000                           \n    plearn            0.000                           \n\nVariances:\n                   Estimate  Std.Err  z-value  P(&gt;|z|)\n    phone_add         0.270    0.035    7.704    0.000\n    stress            1.217    0.087   14.064    0.000\n    plearn            0.124    0.019    6.376    0.000\n   .mw                0.376    0.026   14.317    0.000\n   .conc              0.366    0.026   14.268    0.000\n   .pain              0.385    0.027   14.453    0.000\n   .reqp              0.329    0.024   13.986    0.000\n   .imp               0.383    0.027   14.188    0.000\n   .think             0.372    0.026   14.115    0.000\n   .ngu               0.371    0.026   14.303    0.000\n   .check             0.347    0.024   14.167    0.000\n   .use               0.343    0.024   14.041    0.000\n   .puse              0.387    0.027   14.388    0.000\n   .upset             0.159    0.011   14.635    0.000\n   .nocont            0.172    0.012   14.685    0.000\n   .nerv              0.165    0.011   14.601    0.000\n   .hass              0.159    0.011   14.565    0.000\n   .cop               0.397    0.026   15.165    0.000\n   .conf              0.382    0.025   15.146    0.000\n   .way               0.151    0.010   14.484    0.000\n   .nocope            0.165    0.011   14.660    0.000\n   .cont              0.200    0.013   14.865    0.000\n   .ontop             0.147    0.010   14.384    0.000\n   .angr              0.161    0.011   14.636    0.000\n   .anx               0.192    0.013   14.741    0.000\n   .time              0.172    0.012   14.670    0.000\n   .pile              0.130    0.009   14.262    0.000\n   .org               0.248    0.018   13.980    0.000\n   .guid              0.265    0.020   13.202    0.000\n   .usek              0.266    0.019   13.888    0.000\n   .att               0.238    0.018   13.380    0.000\n   .crit              0.240    0.018   13.359    0.000\n   .selfr             0.257    0.019   13.375    0.000\n   .soph              0.265    0.020   13.492    0.000"
  },
  {
    "objectID": "SimpleGriddedCMVSimulation.html",
    "href": "SimpleGriddedCMVSimulation.html",
    "title": "Simple Gridded CVM Simulation",
    "section": "",
    "text": "In this document, we’ll do a simple CMV Simulation to show that our technique works. We’ll then use the same technique on our real data. We will also show how to do a gridded simulation with a range of CMV and other factor loadings."
  },
  {
    "objectID": "SimpleGriddedCMVSimulation.html#simple-cmv-simulation",
    "href": "SimpleGriddedCMVSimulation.html#simple-cmv-simulation",
    "title": "Simple Gridded CVM Simulation",
    "section": "",
    "text": "In this document, we’ll do a simple CMV Simulation to show that our technique works. We’ll then use the same technique on our real data. We will also show how to do a gridded simulation with a range of CMV and other factor loadings."
  },
  {
    "objectID": "SimpleGriddedCMVSimulation.html#initialization",
    "href": "SimpleGriddedCMVSimulation.html#initialization",
    "title": "Simple Gridded CVM Simulation",
    "section": "Initialization",
    "text": "Initialization\nWe will need the following projects:\n\ntidyverse: Data wrangling\nlavaan: SEM functionality\nsimstandard: Does lavaan simulation properly (lavaan’s SimulateData() has problems) and provides some handy functions for working with SEM data in data frames\nsemPlot: Plotting SEM diagrams\n\nWe’ll also set the random seed to an arbitrary fixed value to allow for reproduceability\nFinally, we need several scripts in cmv_sim_functions.R\n\nlibrary(tidyverse)\nlibrary(furrr)\nlibrary(lavaan)\nlibrary(simstandard)\nlibrary(semPlot)\n\nset.seed(1337)\nplan(\"multicore\") # when using parallel processing in furrr, use all cores\n\nsource(\"cmv_sim_functions.R\", local = knitr::knit_global())"
  },
  {
    "objectID": "SimpleGriddedCMVSimulation.html#model",
    "href": "SimpleGriddedCMVSimulation.html#model",
    "title": "Simple Gridded CVM Simulation",
    "section": "Model",
    "text": "Model\nOur model has three latent variables that are each measured with two or three items. Additionally, each item is measured using a 5-likert scale.\n\nX\n\nx1\nx2\nx3\n\nY\n\ny1\ny2\ny3\n\nZ\n\nz1\nz2\nz3\n\n\nWe’ll input the model in lavaan formula syntax and have it create an SEM diagram for us\n\ncfa_model &lt;- '\n  # measurement model\n  X =~ x1 + x2 + x3\n  Y =~ y1 + y2 + y3\n  Z =~ z1 + z2 + z3\n  \n  # covariances\n  X ~~ Y\n  Y ~~ Z\n  X ~~ Z\n'\n\nsemPlotModel_lavaanModel(cfa_model) |&gt; \n  semPaths(layout=\"tree\", rotation=2, nCharNodes=5, sizeMan2 = 2.5, mar = c(1,4,1,3), label.norm = \"OOOOO\", residuals = FALSE)"
  },
  {
    "objectID": "SimpleGriddedCMVSimulation.html#simulation",
    "href": "SimpleGriddedCMVSimulation.html#simulation",
    "title": "Simple Gridded CVM Simulation",
    "section": "Simulation",
    "text": "Simulation\nTo simulate, we need to set the parameter values. We’ll do this for each kind of parameter. Before we do that, though, we need to convert the model to a lavaan parameter table. We will also add the CMV marker variable (using a function in cmv_sim_functions.R)\n\ncfa_model_pars &lt;- lavaanify(cfa_model, std.lv = TRUE) |&gt; add_cmv_marker()\n\nsemPlotModel_lavaanModel(cfa_model_pars) |&gt; \n  semPaths(layout=\"tree\", rotation=2, nCharNodes=5, sizeMan2 = 2.5, mar = c(1,4,1,3), label.norm = \"OOOOO\", residuals = FALSE)\n\n\n\n\n\nparameters\nWe’ll create a parameter grid varying the CMV loadings from 0 to 1 and keeping the factor loadings constant at 0.8. We’ll put in a little bit of between factor covariance, but he covariance between the factors and the marker is set to 0.\n\nloadings &lt;- 0.9\ncmv_loadings = seq(0.1, 0.2, by = 0.1)\ncovariances &lt;- 0 \ncfa_model_pars &lt;- cfa_model_pars |&gt; fix_cmv_loadings(loadings, invert = TRUE) |&gt; fix_covariances(covariances)\ncfa_model_pars_list &lt;- map(cmv_loadings, \\(x) fix_cmv_loadings(cfa_model_pars, x)) # make a list of data frames with each frame having one of the CMV loadings\nfits &lt;- map(cfa_model_pars_list, \\(x) { #TODO: change to future_map\n    cfa_sim &lt;- sim_standardized(x, latent = FALSE, errors = FALSE, factor_scores = FALSE,  composites = FALSE, matrices = FALSE) |&gt; \n    # create likert scores using standard z scores for quintiles\n    mutate(across(everything(), \\(y) findInterval(y, vec=c(-Inf, -1.2,-0.4, 0.4, 1.2,Inf)))) \n    print(tibble(cfa_sim))\n    return(cfa(fixed2free(cfa_model_pars), cfa_sim))\n}) \n\nWarning in lavaan::lavParTable(m, fixed.x = F): lavaan WARNING: input already\nlooks like a parameter table; returning as is\n\n\nWarning in sim_standardized_matrices(m, ...): Because the following relationship was not set, it is assumed to be 0:\nX =~ x1\n\n\nWarning in lavaan::lavaanify(., fixed.x = FALSE): lavaan WARNING: input already\nlooks like a parameter table; returning as is\n\n\n# A tibble: 1,000 × 16\n      x1    x2    x3    y1    y2    y3    z1    z2    z3  CMV1  CMV2  CMV3  CMV4\n   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;\n 1     4     3     3     5     3     5     5     5     5     2     4     1     3\n 2     3     2     2     3     3     5     2     2     1     3     5     4     2\n 3     2     1     1     4     3     4     4     4     4     2     3     4     2\n 4     1     2     3     3     4     3     5     5     4     1     4     3     2\n 5     4     4     5     3     4     3     2     3     3     2     5     1     3\n 6     2     2     3     4     3     3     2     3     3     2     3     2     2\n 7     4     5     4     4     5     5     5     5     5     1     2     3     3\n 8     3     2     3     1     1     1     2     3     2     5     1     2     4\n 9     4     3     3     5     5     4     3     2     3     5     5     2     4\n10     4     4     4     2     3     3     3     3     2     4     3     4     2\n# ℹ 990 more rows\n# ℹ 3 more variables: CMV5 &lt;int&gt;, CMV6 &lt;int&gt;, CMV7 &lt;int&gt;\n\n\nWarning in lavaan::lavaanify(., fixed.x = FALSE): lavaan WARNING: input already\nlooks like a parameter table; returning as is\n\n\nWarning in lavaan::lavaan(model = fixed2free(cfa_model_pars), data = cfa_sim, : lavaan WARNING:\n    the optimizer warns that a solution has NOT been found!\n\n\nWarning in lavaan::lavParTable(m, fixed.x = F): lavaan WARNING: input already\nlooks like a parameter table; returning as is\n\n\nWarning in sim_standardized_matrices(m, ...): Because the following relationship was not set, it is assumed to be 0:\nX =~ x1\n\n\nWarning in lavaan::lavaanify(., fixed.x = FALSE): lavaan WARNING: input already\nlooks like a parameter table; returning as is\n\n\n# A tibble: 1,000 × 16\n      x1    x2    x3    y1    y2    y3    z1    z2    z3  CMV1  CMV2  CMV3  CMV4\n   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;\n 1     3     3     2     1     1     1     1     1     1     2     4     1     1\n 2     1     1     1     2     2     2     1     2     2     2     4     3     3\n 3     3     2     3     3     3     4     2     1     1     3     3     3     5\n 4     1     1     1     4     4     4     1     1     1     2     4     3     5\n 5     3     3     4     2     3     2     2     2     1     3     3     3     4\n 6     3     4     4     1     2     1     5     5     5     4     5     3     4\n 7     3     3     2     3     4     3     4     5     5     2     4     2     5\n 8     1     1     1     1     2     2     2     2     1     5     1     4     4\n 9     1     1     1     3     3     4     2     3     3     3     2     4     3\n10     3     2     3     3     5     5     4     4     4     4     3     1     4\n# ℹ 990 more rows\n# ℹ 3 more variables: CMV5 &lt;int&gt;, CMV6 &lt;int&gt;, CMV7 &lt;int&gt;\n\n\nWarning in lavaan::lavaanify(., fixed.x = FALSE): lavaan WARNING: input already\nlooks like a parameter table; returning as is\n\n\nWarning in lav_model_vcov(lavmodel = lavmodel, lavsamplestats = lavsamplestats, : lavaan WARNING:\n    Could not compute standard errors! The information matrix could\n    not be inverted. This may be a symptom that the model is not\n    identified.\n\n#test &lt;- do.call(lavTestLRT, fits)\n#tibble(test)\n\n#fit_measures &lt;- map(fits, \\(x) fitmeasures(x))  |&gt;\n  # convert from list of measures to tibble\n#  map_dfr(~tibble(fit_measure = names(.x), value = .x), .id = \"run\")"
  },
  {
    "objectID": "GenerateBaselineData.html",
    "href": "GenerateBaselineData.html",
    "title": "GenerateBaselineData",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(lavaan)\n\nThis is lavaan 0.6-16\nlavaan is FREE software! Please report any bugs.\n\nlibrary(semPlot)\n\nset.seed(1337)\n#plan(\"multicore\") # when using parallel processing in furrr, use all cores\n\nsource(\"cmv_sim_functions.R\", local = knitr::knit_global())"
  },
  {
    "objectID": "GenerateBaselineData.html#introduction",
    "href": "GenerateBaselineData.html#introduction",
    "title": "GenerateBaselineData",
    "section": "Introduction",
    "text": "Introduction\nIn this document we generate a random dataset using the model first introduced in (Maxham and Netemeyer 2003) and used for a CMV simulation in (Fuller et al. 2016)"
  },
  {
    "objectID": "GenerateBaselineData.html#the-model",
    "href": "GenerateBaselineData.html#the-model",
    "title": "GenerateBaselineData",
    "section": "The model",
    "text": "The model\nThe model we will use has the constructs in Table 1 below\n\n\n\nConstruct\nAbbreviation\nNumber of measures\n\n\n\n\nSatisfaction with Recovery\nSSR\n3\n\n\nReturn Intent1\nRI\n3\n\n\nWord of Mouth\nWOM\n3\n\n\nSatisfaction\nSAT\n3\n\n\nDistributive Justice\nDJ\n4\n\n\nInteractional Justice\nIJ\n4\n\n\nProcedural Justice\nPJ\n4\n\n\n\nEach of these constructs has several measures, and the model is expressed as a confirmatory factor analysis in the lavaan equation below and associated diagram\n\ncfa_sim_model &lt;- \"\n  SSR =~ ssr1 + ssr2 + ssr3\n  RI  =~ ri1 + ri2 + ri3\n  WOM =~ wom1 + wom2 + wom3\n  SAT =~ sat1 + sat2 + sat3\n  DJ  =~ dj1 + dj2 + dj3 + dj4\n  IJ  =~ ij1 + ij2 + ij3 + ij4\n  PJ  =~ pj1 + pj2 + pj3 + pj4\n\n  SSR ~~ SSR\n  RI ~~ RI\n  WOM ~~ WOM\n  SAT ~~ SAT\n  DJ ~~ DJ\n  IJ ~~ IJ\n  PJ ~~ PJ\n\"\nsemPlotModel_lavaanModel(cfa_sim_model) |&gt; \n  semPaths(layout=\"tree\", rotation=2, nCharNodes=5, sizeMan2 = 2.5, mar = c(1,4,1,3), label.norm = \"OOOOO\", residuals = FALSE)"
  },
  {
    "objectID": "GenerateBaselineData.html#the-data",
    "href": "GenerateBaselineData.html#the-data",
    "title": "GenerateBaselineData",
    "section": "The Data",
    "text": "The Data\nLet’s use the correlation matrix data from (Fuller et al. 2016) to fit this model\n\n# enter as a lower triangular matrix\nlower_tri &lt;- matrix(0, ncol=7, nrow=7)\n\n# Fill the columns of the lower triangle\nlower_tri[1:1, 1] &lt;- .88\nlower_tri[1:2, 2] &lt;- c(.46, .88)\nlower_tri[1:3, 3] &lt;- c(.70, .48, .88)\nlower_tri[1:4, 4] &lt;- c(.38, .65, .34, .90)\nlower_tri[1:5, 5] &lt;- c(.64, .50, .53, .51, .89)\nlower_tri[1:6, 6] &lt;- c(.55, .47, .57, .52, .57, .89)\nlower_tri[1:7, 7] &lt;- c(.47, .44, .43, .59, .55, .55, .87)\n\n# Create the full correlation matrix\ncor_matrix &lt;- lower_tri + t(lower_tri) - diag(diag(lower_tri))\n\n# get the reliabilities\nreliabilities &lt;- diag(cor_matrix)\n\n# set the diagonal to 1\ndiag(cor_matrix) &lt;- 1\n\ncor_matrix\n\n     [,1] [,2] [,3] [,4] [,5] [,6] [,7]\n[1,] 1.00 0.46 0.70 0.38 0.64 0.55 0.47\n[2,] 0.46 1.00 0.48 0.65 0.50 0.47 0.44\n[3,] 0.70 0.48 1.00 0.34 0.53 0.57 0.43\n[4,] 0.38 0.65 0.34 1.00 0.51 0.52 0.59\n[5,] 0.64 0.50 0.53 0.51 1.00 0.57 0.55\n[6,] 0.55 0.47 0.57 0.52 0.57 1.00 0.55\n[7,] 0.47 0.44 0.43 0.59 0.55 0.55 1.00\n\n\nThese are only the correlations. We need to use the standard deviations to get the variance-covariance matrix. At the same time let’s add the names and set the means.\n\nvar_names &lt;- c(\"ssr\", \"ri\", \"wom\", \"sat\", \"dj\", \"ij\", \"pj\")\n\n# Assign the names to the correlation matrix\nrownames(cor_matrix) &lt;- var_names\ncolnames(cor_matrix) &lt;- var_names\n\n# Add in the means and standard deviation:\nconstruct_means &lt;- c(SSR = 5.49, RI = 3.25, WOM = 4.03, SAT = 4.27, DJ = 3.44, IJ = 3.89, PJ = 3.93)\nconstruct_sds &lt;- c(SSR = 1.01, RI = 1.03, WOM = 0.92, SAT = 1.45, DJ = 1.38, IJ = 1.27, PJ = 1.17)\n\n#create the covariance matrix\ncov_matrix &lt;- cor2cov(cor_matrix, construct_sds) \ncov_matrix\n\n         ssr       ri      wom      sat       dj       ij       pj\nssr 1.020100 0.478538 0.650440 0.556510 0.892032 0.705485 0.555399\nri  0.478538 1.060900 0.454848 0.970775 0.710700 0.614807 0.530244\nwom 0.650440 0.454848 0.846400 0.453560 0.672888 0.665988 0.462852\nsat 0.556510 0.970775 0.453560 2.102500 1.020510 0.957580 1.000935\ndj  0.892032 0.710700 0.672888 1.020510 1.904400 0.998982 0.888030\nij  0.705485 0.614807 0.665988 0.957580 0.998982 1.612900 0.817245\npj  0.555399 0.530244 0.462852 1.000935 0.888030 0.817245 1.368900"
  },
  {
    "objectID": "GenerateBaselineData.html#simulating-new-data",
    "href": "GenerateBaselineData.html#simulating-new-data",
    "title": "GenerateBaselineData",
    "section": "Simulating New Data",
    "text": "Simulating New Data\nTo simulate data we need all of the left-side components of the following (Ji et al. 2022)\n\\[\n\\boldsymbol{y_j}=\\boldsymbol{\\beta} + \\boldsymbol{\\Lambda}\\boldsymbol\\eta_{j} + \\boldsymbol{\\epsilon_{j}}\n\\]\nIn expanded format\n\\[\n\\underbrace{\\left[\\begin{array}{l}\ny_{1 j} \\\\\ny_{2 j} \\\\\n\\vdots \\\\\ny_{i j}\n\\end{array}\\right]}_{\\boldsymbol{y}_{j}}=\\underbrace{\\left[\\begin{array}{c}\n\\beta_{1} \\\\\n\\beta_{2} \\\\\n\\vdots \\\\\n\\beta_{i}\n\\end{array}\\right]}_{\\boldsymbol{\\beta}}+\\underbrace{\\left[\\begin{array}{cc}\n\\lambda_{11} & & 0 \\\\\n\\lambda_{21} & & 0 \\\\\n\\vdots & \\cdots & \\vdots \\\\\n\\lambda_{i1} & & 0 \\\\\n\\vdots & \\ddots & \\vdots \\\\\n0 &  & \\lambda_{ik} \\\\\n\\vdots & \\cdots & \\vdots \\\\\n0 & & \\lambda_{ik}\n\\end{array}\\right]}_{\\Lambda}\\underbrace{\\left[\\begin{array}{l}\n\\eta_{1 j} \\\\\n\\eta_{2 j} \\\\\n\\vdots \\\\\n\\eta_{i j}\n\\end{array}\\right]}_{\\boldsymbol{\\eta}_j}+\\underbrace{\\left[\\begin{array}{c}\n\\epsilon_{1 j} \\\\\n\\epsilon_{2 j} \\\\\n\\vdots \\\\\n\\epsilon_{i j}\n\\end{array}\\right]}_{\\boldsymbol{\\epsilon}_j}\n\\]\nWhere\n\\[\n\\boldsymbol{\\epsilon}_{j} \\sim N_{I}(\\mathbf{0}, \\mathbf{\\Theta})\n\\]\n\\[\n\\boldsymbol{\\eta}_{j} \\sim N_{K}(\\mathbf{0}, \\boldsymbol{\\Psi}),\n\\]\nAnd\n\\[\n\\boldsymbol{\\Psi}=\\mathrm{Cov}\\begin{pmatrix}\n\\eta_{1j} \\\\\n\\eta_{2j} \\\\\n\\vdots \\\\\nn_{ij}\n\\end{pmatrix}=\n\\begin{pmatrix}\n\\psi_{11} & \\psi_{12} & \\cdots & \\psi_{1k} \\\\\n\\psi_{21} & \\psi_{22} & \\cdots & \\psi_{2k} \\\\\n\\vdots & \\vdots & \\ddots & \\vdots \\\\\n\\psi_{i1} & \\psi_{i2} & \\cdots & \\psi_{ik}\n\\end{pmatrix}\n\\]\n\\[\n\\mathbf{\\Theta}=\\mathrm{Cov}\n\\begin{pmatrix}\n\\epsilon_{1 j} \\\\\n\\epsilon_{2 j} \\\\\n\\epsilon_{3 j} \\\\\n\\vdots \\\\\n\\epsilon_{i j}\n\\end{pmatrix} =\n\\begin{pmatrix}\n\\theta_{11} & 0 & \\cdots & 0 \\\\\n0 & \\theta_{22} & \\cdots & 0 \\\\\n\\vdots & \\vdots & \\ddots & \\vdots \\\\\n0 & 0 & \\cdots & \\theta_{ii}\n\\end{pmatrix}\n\\]\nWe can derive \\(\\boldsymbol{\\beta}\\) by assuming the mean for each item of each construct is the same, \\(\\beta_{ijk} = \\mu_k\\).\n\nbeta &lt;- construct_means\n\nThe covariance matrix is \\(\\boldsymbol{\\Psi}\\), which we derived from the given correlation matrix.\n\npsi &lt;- cov_matrix\n\nFor \\(\\boldsymbol{\\Theta}\\) we need to determine the error of each item. Since we only have there reliability for each construct, we’ll need to derive each \\(\\theta_{ii}\\), or the covariance for each item. We are given the reliability of each construct \\(R_{kk}\\), which is an estimate of the correlation coefficient of each construct. The covariance \\(\\epsilon_k\\), then, for each construct is \\((1 - R_{kk})^2\\). The linear combination of the covariance of each item \\(x_i\\) in construct \\(k\\) is \\(\\epsilon_k = \\frac{\\sum_1^ix_{i}}{N_i}\\). If \\(x_1 = x_2 ...= x_i\\), then \\(\\epsilon_k = \\frac{N_ix}{N_i} = x\\). Therefore, each \\(\\theta_{ii} = (1 - R_{kk})^2\\) for each \\(i\\) in each \\(k\\).\nSo, for each construct we will use one minus its reliability for the covariance of its error term to construct \\(\\boldsymbol{\\Theta}\\) .\n\nitems_per_construct &lt;- c(3,3,3,3,4,4,4)\nsigma_k &lt;- (1 - reliabilities)^2 #construct error variance\ntheta &lt;- sigma_k |&gt; rep(items_per_construct) |&gt; diag(sum(items_per_construct), sum(items_per_construct))\n\n\n\n\n\n\n\nNote\n\n\n\nWe know the averagle loading for each item on each construct, but we don’t know what each item loading is exactly.\n\n\nFinally, we need \\(\\boldsymbol{\\Lambda}\\). In measurement theory the reliability \\(r_{11}\\) is defined as \\(r_{11} = \\frac{\\sigma^2_t}{\\sigma^2_x}\\) where \\(t\\) is the true factor score and \\(x\\) is the measured score(Nunnally and Bernstein 1994, eq. 6-9) . Therfore, \\(\\sigma_t^2 = r_{11}\\sigma_x^2\\). \\(\\sigma_x2\\) is represented by \\(\\boldsymbol{\\Psi}\\), so \\(\\boldsymbol{\\Lambda}\\) can be represented by the reliability for each construct \\(r_{kk}\\)\n\n# Create a matrix filled with zeros with rows equal to the total number of items\n# and columns equal to the number of factors\n\n#TODO change zeros to normally random loadings \nlambda &lt;- matrix(0, nrow = sum(items_per_construct), ncol = length(items_per_construct))\n\n# Fill the matrix with the 1s where each factor loads onto the corresponding items\nstart_index &lt;- 1\nfor (i in seq_along(items_per_construct)) {\n  end_index &lt;- start_index + items_per_construct[i] - 1\n  lambda[start_index:end_index, i] &lt;- reliabilities[i]\n  start_index &lt;- end_index + 1\n}\n\nWe can now use all of the components to generate a data set\n\nJ &lt;- 500\n\n# generate random factor scores for each construct on each subject\neta &lt;- MASS::mvrnorm(J, mu = rep(0, nrow(psi)), Sigma = psi)\n\n# generate error terms for each item for each subject\nepsilon &lt;- MASS::mvrnorm(J, mu = rep(0, ncol(theta)),Sigma = theta)\n\n\nY &lt;- rep(beta, items_per_construct) + tcrossprod(eta, lambda) + epsilon \n\nY &lt;- Y |&gt; round() # turn in to likert.  Should already be normally distributed\nY[Y==0] &lt;- 1 #capture those that end up just below 0.5 and just above 7.5\nY[Y==8] &lt;- 7\n\nitem_names &lt;- mapply(function(name, num) paste0(name, seq(num)), var_names, items_per_construct, SIMPLIFY = FALSE) |&gt; unlist()\n\ncfa_data  &lt;-  Y |&gt; as.data.frame() |&gt; setNames(item_names)\ncfa_data\n\n\n\n  \n\n\n\n\n\n Download data"
  },
  {
    "objectID": "GenerateBaselineData.html#check-the-simulated-data",
    "href": "GenerateBaselineData.html#check-the-simulated-data",
    "title": "GenerateBaselineData",
    "section": "Check the Simulated Data",
    "text": "Check the Simulated Data\nLet’s see what the results are when we try to fit the data to the model\n\nfit&lt;- cfa(cfa_sim_model, cfa_data, meanstructure = TRUE)\nsummary(fit)\n\nlavaan 0.6.16 ended normally after 52 iterations\n\n  Estimator                                         ML\n  Optimization method                           NLMINB\n  Number of model parameters                        93\n\n  Number of observations                           500\n\nModel Test User Model:\n                                                      \n  Test statistic                              8274.104\n  Degrees of freedom                               231\n  P-value (Chi-square)                           0.000\n\nParameter Estimates:\n\n  Standard errors                             Standard\n  Information                                 Expected\n  Information saturated (h1) model          Structured\n\nLatent Variables:\n                   Estimate  Std.Err  z-value  P(&gt;|z|)\n  SSR =~                                              \n    ssr1              1.000                           \n    ssr2              0.919    0.062   14.738    0.000\n    ssr3              0.979    0.056   17.492    0.000\n  RI =~                                               \n    ri1               1.000                           \n    ri2               0.787    0.053   14.714    0.000\n    ri3               0.954    0.052   18.306    0.000\n  WOM =~                                              \n    wom1              1.000                           \n    wom2              0.835    0.067   12.440    0.000\n    wom3              0.969    0.064   15.224    0.000\n  SAT =~                                              \n    sat1              1.000                           \n    sat2              0.818    0.036   22.549    0.000\n    sat3              0.950    0.033   28.658    0.000\n  DJ =~                                               \n    dj1               1.000                           \n    dj2               1.091    0.046   23.784    0.000\n    dj3               1.017    0.045   22.378    0.000\n    dj4               1.087    0.046   23.466    0.000\n  IJ =~                                               \n    ij1               1.000                           \n    ij2               1.049    0.046   22.703    0.000\n    ij3               1.030    0.047   21.891    0.000\n    ij4               1.069    0.048   22.356    0.000\n  PJ =~                                               \n    pj1               1.000                           \n    pj2               1.172    0.062   18.903    0.000\n    pj3               0.996    0.059   16.885    0.000\n    pj4               1.125    0.061   18.401    0.000\n\nCovariances:\n                   Estimate  Std.Err  z-value  P(&gt;|z|)\n  SSR ~~                                              \n    RI                0.329    0.051    6.462    0.000\n    WOM               0.628    0.057   10.994    0.000\n    SAT               0.377    0.066    5.682    0.000\n    DJ                0.751    0.070   10.663    0.000\n    IJ                0.593    0.064    9.284    0.000\n    PJ                0.367    0.050    7.414    0.000\n  RI ~~                                               \n    WOM               0.241    0.046    5.304    0.000\n    SAT               1.040    0.090   11.611    0.000\n    DJ                0.644    0.069    9.319    0.000\n    IJ                0.538    0.065    8.240    0.000\n    PJ                0.494    0.057    8.684    0.000\n  WOM ~~                                              \n    SAT               0.278    0.060    4.651    0.000\n    DJ                0.547    0.059    9.205    0.000\n    IJ                0.571    0.060    9.515    0.000\n    PJ                0.292    0.044    6.625    0.000\n  SAT ~~                                              \n    DJ                0.842    0.090    9.318    0.000\n    IJ                0.888    0.091    9.747    0.000\n    PJ                0.874    0.083   10.551    0.000\n  DJ ~~                                               \n    IJ                0.818    0.081   10.134    0.000\n    PJ                0.660    0.068    9.682    0.000\n  IJ ~~                                               \n    PJ                0.618    0.066    9.351    0.000\n\nIntercepts:\n                   Estimate  Std.Err  z-value  P(&gt;|z|)\n   .ssr1              4.016    0.051   78.647    0.000\n   .ssr2              4.004    0.053   75.561    0.000\n   .ssr3              3.986    0.048   82.833    0.000\n   .ri1               3.982    0.053   75.532    0.000\n   .ri2               4.010    0.052   76.722    0.000\n   .ri3               4.000    0.052   77.037    0.000\n   .wom1              3.982    0.047   84.833    0.000\n   .wom2              4.002    0.048   83.159    0.000\n   .wom3              3.978    0.045   87.496    0.000\n   .sat1              4.044    0.068   59.703    0.000\n   .sat2              4.040    0.064   63.211    0.000\n   .sat3              4.028    0.065   61.871    0.000\n   .dj1               3.970    0.062   64.450    0.000\n   .dj2               3.954    0.065   61.013    0.000\n   .dj3               3.940    0.063   62.667    0.000\n   .dj4               3.946    0.065   60.613    0.000\n   .ij1               4.014    0.062   65.016    0.000\n   .ij2               4.000    0.061   65.302    0.000\n   .ij3               4.000    0.062   64.820    0.000\n   .ij4               3.998    0.063   63.372    0.000\n   .pj1               3.988    0.055   73.009    0.000\n   .pj2               3.972    0.057   69.540    0.000\n   .pj3               3.996    0.054   73.949    0.000\n   .pj4               3.982    0.056   70.709    0.000\n    SSR               0.000                           \n    RI                0.000                           \n    WOM               0.000                           \n    SAT               0.000                           \n    DJ                0.000                           \n    IJ                0.000                           \n    PJ                0.000                           \n\nVariances:\n                   Estimate  Std.Err  z-value  P(&gt;|z|)\n    SSR               0.753    0.079    9.506    0.000\n    RI                0.946    0.090   10.488    0.000\n    WOM               0.595    0.067    8.877    0.000\n    SAT               1.875    0.147   12.750    0.000\n    DJ                1.321    0.117   11.249    0.000\n    IJ                1.271    0.117   10.855    0.000\n    PJ                0.848    0.089    9.520    0.000\n   .ssr1              0.551    0.044   12.638    0.000\n   .ssr2              0.769    0.055   13.971    0.000\n   .ssr3              0.436    0.037   11.872    0.000\n   .ri1               0.444    0.045    9.981    0.000\n   .ri2               0.781    0.056   13.833    0.000\n   .ri3               0.487    0.044   10.955    0.000\n   .wom1              0.506    0.041   12.305    0.000\n   .wom2              0.743    0.052   14.265    0.000\n   .wom3              0.474    0.039   12.291    0.000\n   .sat1              0.419    0.044    9.431    0.000\n   .sat2              0.788    0.058   13.639    0.000\n   .sat3              0.427    0.042   10.104    0.000\n   .dj1               0.576    0.045   12.719    0.000\n   .dj2               0.527    0.045   11.767    0.000\n   .dj3               0.609    0.048   12.785    0.000\n   .dj4               0.559    0.046   12.036    0.000\n   .ij1               0.635    0.049   12.942    0.000\n   .ij2               0.477    0.041   11.578    0.000\n   .ij3               0.556    0.045   12.321    0.000\n   .ij4               0.538    0.045   11.921    0.000\n   .pj1               0.644    0.048   13.304    0.000\n   .pj2               0.467    0.042   10.998    0.000\n   .pj3               0.620    0.047   13.224    0.000\n   .pj4               0.513    0.044   11.775    0.000"
  },
  {
    "objectID": "GenerateBaselineData.html#footnotes",
    "href": "GenerateBaselineData.html#footnotes",
    "title": "GenerateBaselineData",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nIn (Maxham and Netemeyer 2003), There’s a “Purchase Intent”, but not a “Return Intent”.↩︎"
  },
  {
    "objectID": "CMVSimulation2.html",
    "href": "CMVSimulation2.html",
    "title": "CMV Simulation 2",
    "section": "",
    "text": "This document will go through simulating CMV and IEP."
  },
  {
    "objectID": "CMVSimulation2.html#cmv-simulation-2",
    "href": "CMVSimulation2.html#cmv-simulation-2",
    "title": "CMV Simulation 2",
    "section": "",
    "text": "This document will go through simulating CMV and IEP."
  },
  {
    "objectID": "CMVSimulation2.html#initialization",
    "href": "CMVSimulation2.html#initialization",
    "title": "CMV Simulation 2",
    "section": "Initialization",
    "text": "Initialization\nWe will need the following projects:\n\ntidyverse: Data wrangling\nlavaan: SEM functionality\nsemPlot: Plotting SEM diagrams\n\nWe’ll also set the random seed to an arbitrary fixed value to allow for reproduceability\n\nlibrary(tidyverse)\nlibrary(lavaan)\nlibrary(semPlot)\n\nset.seed(1337)"
  },
  {
    "objectID": "CMVSimulation2.html#model",
    "href": "CMVSimulation2.html#model",
    "title": "CMV Simulation 2",
    "section": "Model",
    "text": "Model\nOur model has three latent variables that are each measured with several items:\n\nMobile phone addiction: phone_add\n\nMissed Work: mw\nConcentration: conc\nPain: pain\nRequire Phone: reqp\nImpatient: imp\nThinking: think\nNever Give Up: ngu\nConstant Checking: check\nExtended Usage: use\nPerceived Extended Usage: puse\n\nPerceived Stress: stress\n\nUpset: upset\nUnable to Control: nocont\nNervous: nerv\nIrritating Hassles: hass\nCoping: cope\nConfident: conf\nGoing Your Way: way\nNo Cope: nocope\nControl: cont\nOn Top: ontop\nAngered: angr\nAnxious: anx\nControl Time: time\nPiling: pile\n\nPerceived Learning: plearn\n\nOrganize: org\nGuide: guid\nUse Knowledge: usek\nAttitude: att\nCritique: crit\nSelf-Reliant: selfr\nSophisticated: soph\n\n\nWe’ll input the model in lavaan formula syntax and have it create an SEM diagram for us\n\ncfa_model &lt;- '\n  # measurement model\n  phone_add =~ mw + conc + pain + reqp + imp + think + ngu + check + use + puse\n  stress =~ upset + nocont + nerv + hass + cop + conf + way + nocope + cont + ontop + angr + anx + time + pile\n  plearn =~ org + guid + usek + att + crit + selfr + soph\n  \n  # covariances\n  phone_add ~~ stress\n  phone_add ~~ plearn\n  stress ~~ plearn\n'\n\nsemPlotModel_lavaanModel(cfa_model) |&gt; \n  semPaths(layout=\"tree\", rotation=2, nCharNodes=5, sizeMan2 = 2.5, mar = c(1,4,1,3), label.norm = \"OOOOO\", residuals = FALSE)"
  },
  {
    "objectID": "CMVSimulation2.html#simulation",
    "href": "CMVSimulation2.html#simulation",
    "title": "CMV Simulation 2",
    "section": "Simulation",
    "text": "Simulation\nNow we’ll simulate data for this model. In this case all item weights are simulated as being equal\n\n\n\n\n\n\nNote\n\n\n\nRight now everything is coded in the same direction. Will need to fix loading at -1 for reverse coded items\n\n\n\ncfa_sim &lt;- simulateData(cfa_model, model.type = \"cfa\", sample.nobs = 500)\n#change to likert scores\ncfa_sim &lt;- cfa_sim |&gt; mutate(across(everything(), \\(x) findInterval(x, vec=c(-Inf,-2.5,-1, 1,2.5,Inf))))\ncfa_sim\n\n\n\n  \n\n\n\nCheck the fit of the simulation\n\nfit &lt;- cfa(cfa_model, cfa_sim, ordered = TRUE)\nsummary(fit)\n\nlavaan 0.6.16 ended normally after 43 iterations\n\n  Estimator                                       DWLS\n  Optimization method                           NLMINB\n  Number of model parameters                       158\n\n  Number of observations                           500\n\nModel Test User Model:\n                                              Standard      Scaled\n  Test Statistic                               347.483     465.802\n  Degrees of freedom                               431         431\n  P-value (Chi-square)                           0.999       0.120\n  Scaling correction factor                                  1.329\n  Shift parameter                                          204.263\n    simple second-order correction                                \n\nParameter Estimates:\n\n  Standard errors                           Robust.sem\n  Information                                 Expected\n  Information saturated (h1) model        Unstructured\n\nLatent Variables:\n                   Estimate  Std.Err  z-value  P(&gt;|z|)\n  phone_add =~                                        \n    mw                1.000                           \n    conc              1.012    0.045   22.424    0.000\n    pain              0.980    0.046   21.419    0.000\n    reqp              0.977    0.046   21.256    0.000\n    imp               0.999    0.045   22.125    0.000\n    think             0.957    0.047   20.349    0.000\n    ngu               0.949    0.050   19.164    0.000\n    check             0.922    0.047   19.455    0.000\n    use               0.989    0.046   21.612    0.000\n    puse              1.026    0.048   21.494    0.000\n  stress =~                                           \n    upset             1.000                           \n    nocont            1.000    0.043   23.132    0.000\n    nerv              1.055    0.046   22.838    0.000\n    hass              1.048    0.042   25.067    0.000\n    cop               0.991    0.048   20.530    0.000\n    conf              0.989    0.047   20.915    0.000\n    way               1.070    0.046   23.247    0.000\n    nocope            1.020    0.044   23.027    0.000\n    cont              0.960    0.045   21.191    0.000\n    ontop             1.005    0.044   23.094    0.000\n    angr              0.992    0.046   21.478    0.000\n    anx               1.007    0.044   22.784    0.000\n    time              0.905    0.049   18.556    0.000\n    pile              0.996    0.045   22.191    0.000\n  plearn =~                                           \n    org               1.000                           \n    guid              1.055    0.054   19.475    0.000\n    usek              0.972    0.053   18.495    0.000\n    att               1.014    0.057   17.890    0.000\n    crit              1.015    0.057   17.867    0.000\n    selfr             1.018    0.055   18.444    0.000\n    soph              1.083    0.054   20.086    0.000\n\nCovariances:\n                   Estimate  Std.Err  z-value  P(&gt;|z|)\n  phone_add ~~                                        \n    stress            0.005    0.025    0.196    0.845\n    plearn           -0.013    0.025   -0.533    0.594\n  stress ~~                                           \n    plearn            0.031    0.024    1.284    0.199\n\nIntercepts:\n                   Estimate  Std.Err  z-value  P(&gt;|z|)\n   .mw                0.000                           \n   .conc              0.000                           \n   .pain              0.000                           \n   .reqp              0.000                           \n   .imp               0.000                           \n   .think             0.000                           \n   .ngu               0.000                           \n   .check             0.000                           \n   .use               0.000                           \n   .puse              0.000                           \n   .upset             0.000                           \n   .nocont            0.000                           \n   .nerv              0.000                           \n   .hass              0.000                           \n   .cop               0.000                           \n   .conf              0.000                           \n   .way               0.000                           \n   .nocope            0.000                           \n   .cont              0.000                           \n   .ontop             0.000                           \n   .angr              0.000                           \n   .anx               0.000                           \n   .time              0.000                           \n   .pile              0.000                           \n   .org               0.000                           \n   .guid              0.000                           \n   .usek              0.000                           \n   .att               0.000                           \n   .crit              0.000                           \n   .selfr             0.000                           \n   .soph              0.000                           \n    phone_add         0.000                           \n    stress            0.000                           \n    plearn            0.000                           \n\nThresholds:\n                   Estimate  Std.Err  z-value  P(&gt;|z|)\n    mw|t1            -1.825    0.108  -16.973    0.000\n    mw|t2            -0.668    0.061  -10.971    0.000\n    mw|t3             0.739    0.062   11.909    0.000\n    mw|t4             1.607    0.092   17.416    0.000\n    conc|t1          -1.706    0.099  -17.297    0.000\n    conc|t2          -0.687    0.061  -11.228    0.000\n    conc|t3           0.745    0.062   11.993    0.000\n    conc|t4           1.774    0.104   17.134    0.000\n    pain|t1          -1.977    0.121  -16.300    0.000\n    pain|t2          -0.656    0.061  -10.800    0.000\n    pain|t3           0.745    0.062   11.993    0.000\n    pain|t4           1.799    0.105   17.059    0.000\n    reqp|t1          -1.728    0.100  -17.252    0.000\n    reqp|t2          -0.706    0.062  -11.484    0.000\n    reqp|t3           0.700    0.061   11.399    0.000\n    reqp|t4           1.774    0.104   17.134    0.000\n    imp|t1           -1.728    0.100  -17.252    0.000\n    imp|t2           -0.650    0.061  -10.714    0.000\n    imp|t3            0.706    0.062   11.484    0.000\n    imp|t4            1.774    0.104   17.134    0.000\n    think|t1         -1.825    0.108  -16.973    0.000\n    think|t2         -0.693    0.061  -11.314    0.000\n    think|t3          0.706    0.062   11.484    0.000\n    think|t4          1.825    0.108   16.973    0.000\n    ngu|t1           -1.706    0.099  -17.297    0.000\n    ngu|t2           -0.687    0.061  -11.228    0.000\n    ngu|t3            0.732    0.062   11.824    0.000\n    ngu|t4            1.852    0.110   16.873    0.000\n    check|t1         -1.645    0.095  -17.388    0.000\n    check|t2         -0.662    0.061  -10.886    0.000\n    check|t3          0.793    0.063   12.580    0.000\n    check|t4          1.852    0.110   16.873    0.000\n    use|t1           -1.852    0.110  -16.873    0.000\n    use|t2           -0.650    0.061  -10.714    0.000\n    use|t3            0.726    0.062   11.739    0.000\n    use|t4            1.799    0.105   17.059    0.000\n    puse|t1          -1.665    0.096  -17.364    0.000\n    puse|t2          -0.687    0.061  -11.228    0.000\n    puse|t3           0.772    0.063   12.330    0.000\n    puse|t4           1.943    0.118   16.474    0.000\n    upset|t1         -1.706    0.099  -17.297    0.000\n    upset|t2         -0.713    0.062  -11.570    0.000\n    upset|t3          0.674    0.061   11.057    0.000\n    upset|t4          1.751    0.102   17.198    0.000\n    nocont|t1        -1.728    0.100  -17.252    0.000\n    nocont|t2        -0.637    0.060  -10.541    0.000\n    nocont|t3         0.687    0.061   11.228    0.000\n    nocont|t4         1.943    0.118   16.474    0.000\n    nerv|t1          -1.685    0.097  -17.334    0.000\n    nerv|t2          -0.739    0.062  -11.909    0.000\n    nerv|t3           0.719    0.062   11.655    0.000\n    nerv|t4           1.852    0.110   16.873    0.000\n    hass|t1          -1.751    0.102  -17.198    0.000\n    hass|t2          -0.765    0.063  -12.246    0.000\n    hass|t3           0.662    0.061   10.886    0.000\n    hass|t4           1.751    0.102   17.198    0.000\n    cop|t1           -1.626    0.093  -17.405    0.000\n    cop|t2           -0.662    0.061  -10.886    0.000\n    cop|t3            0.706    0.062   11.484    0.000\n    cop|t4            1.665    0.096   17.364    0.000\n    conf|t1          -1.555    0.089  -17.421    0.000\n    conf|t2          -0.668    0.061  -10.971    0.000\n    conf|t3           0.693    0.061   11.314    0.000\n    conf|t4           1.825    0.108   16.973    0.000\n    way|t1           -1.751    0.102  -17.198    0.000\n    way|t2           -0.713    0.062  -11.570    0.000\n    way|t3            0.745    0.062   11.993    0.000\n    way|t4            1.685    0.097   17.334    0.000\n    nocope|t1        -1.911    0.115  -16.626    0.000\n    nocope|t2        -0.779    0.063  -12.413    0.000\n    nocope|t3         0.759    0.062   12.162    0.000\n    nocope|t4         1.665    0.096   17.364    0.000\n    cont|t1          -1.706    0.099  -17.297    0.000\n    cont|t2          -0.719    0.062  -11.655    0.000\n    cont|t3           0.687    0.061   11.228    0.000\n    cont|t4           1.665    0.096   17.364    0.000\n    ontop|t1         -1.607    0.092  -17.416    0.000\n    ontop|t2         -0.619    0.060  -10.282    0.000\n    ontop|t3          0.668    0.061   10.971    0.000\n    ontop|t4          1.685    0.097   17.334    0.000\n    angr|t1          -1.706    0.099  -17.297    0.000\n    angr|t2          -0.687    0.061  -11.228    0.000\n    angr|t3           0.765    0.063   12.246    0.000\n    angr|t4           1.825    0.108   16.973    0.000\n    anx|t1           -1.589    0.091  -17.423    0.000\n    anx|t2           -0.625    0.060  -10.368    0.000\n    anx|t3            0.732    0.062   11.824    0.000\n    anx|t4            1.706    0.099   17.297    0.000\n    time|t1          -1.665    0.096  -17.364    0.000\n    time|t2          -0.681    0.061  -11.143    0.000\n    time|t3           0.625    0.060   10.368    0.000\n    time|t4           1.665    0.096   17.364    0.000\n    pile|t1          -1.825    0.108  -16.973    0.000\n    pile|t2          -0.732    0.062  -11.824    0.000\n    pile|t3           0.726    0.062   11.739    0.000\n    pile|t4           1.706    0.099   17.297    0.000\n    org|t1           -1.751    0.102  -17.198    0.000\n    org|t2           -0.700    0.061  -11.399    0.000\n    org|t3            0.662    0.061   10.886    0.000\n    org|t4            1.728    0.100   17.252    0.000\n    guid|t1          -1.706    0.099  -17.297    0.000\n    guid|t2          -0.719    0.062  -11.655    0.000\n    guid|t3           0.719    0.062   11.655    0.000\n    guid|t4           1.774    0.104   17.134    0.000\n    usek|t1          -1.728    0.100  -17.252    0.000\n    usek|t2          -0.700    0.061  -11.399    0.000\n    usek|t3           0.739    0.062   11.909    0.000\n    usek|t4           1.881    0.112   16.758    0.000\n    att|t1           -1.943    0.118  -16.474    0.000\n    att|t2           -0.779    0.063  -12.413    0.000\n    att|t3            0.631    0.060   10.455    0.000\n    att|t4            1.607    0.092   17.416    0.000\n    crit|t1          -1.685    0.097  -17.334    0.000\n    crit|t2          -0.687    0.061  -11.228    0.000\n    crit|t3           0.706    0.062   11.484    0.000\n    crit|t4           1.685    0.097   17.334    0.000\n    selfr|t1         -1.881    0.112  -16.758    0.000\n    selfr|t2         -0.813    0.063  -12.829    0.000\n    selfr|t3          0.662    0.061   10.886    0.000\n    selfr|t4          1.589    0.091   17.423    0.000\n    soph|t1          -1.645    0.095  -17.388    0.000\n    soph|t2          -0.713    0.062  -11.570    0.000\n    soph|t3           0.619    0.060   10.282    0.000\n    soph|t4           1.728    0.100   17.252    0.000\n\nVariances:\n                   Estimate  Std.Err  z-value  P(&gt;|z|)\n   .mw                0.467                           \n   .conc              0.453                           \n   .pain              0.488                           \n   .reqp              0.491                           \n   .imp               0.467                           \n   .think             0.512                           \n   .ngu               0.519                           \n   .check             0.546                           \n   .use               0.478                           \n   .puse              0.439                           \n   .upset             0.483                           \n   .nocont            0.483                           \n   .nerv              0.424                           \n   .hass              0.432                           \n   .cop               0.493                           \n   .conf              0.494                           \n   .way               0.408                           \n   .nocope            0.462                           \n   .cont              0.523                           \n   .ontop             0.478                           \n   .angr              0.491                           \n   .anx               0.476                           \n   .time              0.576                           \n   .pile              0.488                           \n   .org               0.510                           \n   .guid              0.454                           \n   .usek              0.537                           \n   .att               0.496                           \n   .crit              0.495                           \n   .selfr             0.493                           \n   .soph              0.426                           \n    phone_add         0.533    0.038   14.018    0.000\n    stress            0.517    0.037   14.144    0.000\n    plearn            0.490    0.041   11.905    0.000\n\nScales y*:\n                   Estimate  Std.Err  z-value  P(&gt;|z|)\n    mw                1.000                           \n    conc              1.000                           \n    pain              1.000                           \n    reqp              1.000                           \n    imp               1.000                           \n    think             1.000                           \n    ngu               1.000                           \n    check             1.000                           \n    use               1.000                           \n    puse              1.000                           \n    upset             1.000                           \n    nocont            1.000                           \n    nerv              1.000                           \n    hass              1.000                           \n    cop               1.000                           \n    conf              1.000                           \n    way               1.000                           \n    nocope            1.000                           \n    cont              1.000                           \n    ontop             1.000                           \n    angr              1.000                           \n    anx               1.000                           \n    time              1.000                           \n    pile              1.000                           \n    org               1.000                           \n    guid              1.000                           \n    usek              1.000                           \n    att               1.000                           \n    crit              1.000                           \n    selfr             1.000                           \n    soph              1.000"
  }
]